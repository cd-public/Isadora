case: 0_128_139_150_161_172_183_194_205_216_227_238_249_260_271_282_293_304_315_326_337_348_359_370_381_392_403_414_425_436_447_458_469_480_491_502_513_524_535_546_557_568_579_590_601_612_623_634_645_656_667_678_689_700_711_722_733_744_755_766_777_788_799_810_821_832_843_854_865_876_887_898_909_920_931_942_953_964_975_986_997_1008_1019_1030_1041_1052_1063_1074_1085_1096
	decoder_pseudo_trigger_q =?=> [q_insn_rd, q_insn_imm, q_ascii_instr, q_insn_rs2, q_insn_rs1]
case: 0_127_138_149_160_171_182_193_204_215_226_237_248_259_270_281_292_303_314_325_336_347_358_369_380_391_402_413_424_435_446_457_468_479_490_501_512_523_534_545_556_567_578_589_600_611_622_633_644_655_666_677_688_699_710_721_732_743_754_765_776_787_798_809_820_831_842_853_864_875_886_897_908_919_930_941_952_963_974_985_996_1007_1018_1029_1040_1051_1062_1073_1084_1095
	decoder_pseudo_trigger_q =?=> [dbg_insn_rd, dbg_insn_rs2, dbg_insn_rs1]
case: 0_109_117_127_128_135_138_139_146_149_150_157_160_161_168_171_172_179_182_183_190_193_194_201_204_205_212_215_216_223_226_227_234_237_238_245_248_249_256_259_260_267_270_271_278_281_282_289_292_293_300_303_304_311_314_315_322_325_326_333_336_337_344_347_348_355_358_359_366_369_370_377_380_381_388_391_392_399_402_403_410_413_414_421_424_425_432_435_436_443_446_447_454_457_458_465_468_469_476_479_480_487_490_491_498_501_502_509_512_513_520_523_524_531_534_535_542_545_546_553_556_557_564_567_568_575_578_579_586_589_590_597_600_601_608_611_612_619_622_623_630_633_634_641_644_645_652_655_656_663_666_667_674_677_678_685_688_689_696_699_700_707_710_711_718_721_722_729_732_733_740_743_744_751_754_755_762_765_766_773_776_777_784_787_788_795_798_799_806_809_810_817_820_821_828_831_832_839_842_843_850_853_854_861_864_865_872_875_876_883_886_887_894_897_898_905_908_909_916_919_920_927_930_931_938_941_942_949_952_953_960_963_964_971_974_975_982_985_986_993_996_997_1004_1007_1008_1015_1018_1019_1026_1029_1030_1037_1040_1041_1048_1051_1052_1059_1062_1063_1070_1073_1074_1081_1084_1085_1092_1095_1096
	decoder_pseudo_trigger_q =?=> [dbg_insn_imm, dbg_ascii_instr]
case: 0
	decoder_pseudo_trigger_q =?=> [q_insn_opcode, dbg_insn_opcode, decoder_pseudo_trigger_q]
	alu_wait_2 =?=> [alu_wait_2]
	instr_setq =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_setq]
	instr_andi =?=> [alu_out, cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_andi]
	timer =?=> [timer]
	decoded_imm_j =?=> [decoded_imm_j]
	mem_wdata =?=> [mem_wdata]
	cpu_state =?=> [dbg_ascii_state, cpu_state, cpuregs_wrdata]
	irq_active =?=> [irq_active]
	instr_bltu =?=> [alu_out, instr_bltu, is_sltiu_bltu_sltu, alu_out_0]
	next_irq_pending =?=> [next_irq_pending]
	cpuregs_rs1 =?=> [cpuregs_rs1]
	set_mem_do_rinst =?=> [set_mem_do_rinst]
	pcpi_int_wr =?=> [pcpi_int_wr]
	mem_la_wdata =?=> [mem_la_wdata]
	trace_data =?=> [trace_data]
	alu_shr =?=> [alu_shr]
	mem_16bit_buffer =?=> [clear_prefetched_high_word, clear_prefetched_high_word_q]
	dbg_insn_rs1 =?=> [dbg_insn_rs1, q_insn_rs1]
	cached_insn_rs1 =?=> [cached_insn_rs1]
	instr_sltiu =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_sltiu, is_sltiu_bltu_sltu, alu_out_0]
	is_lui_auipc_jal_jalr_addi_add_sub =?=> [alu_out, is_lui_auipc_jal_jalr_addi_add_sub]
	q_insn_rs1 =?=> [q_insn_rs1]
	instr_lui =?=> [instr_lui, is_lui_auipc_jal]
	mem_instr =?=> [mem_instr]
	alu_lts =?=> [alu_out, alu_out_0, alu_lts]
	instr_slli =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_slli]
	alu_out_0_q =?=> [alu_out_0_q]
	alu_out_q =?=> [alu_out_q]
	instr_slt =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_slt, is_slti_blt_slt, alu_out_0]
	alu_add_sub =?=> [alu_add_sub]
	q_insn_opcode =?=> [q_insn_opcode]
	cpuregs_rs2 =?=> [cpuregs_rs2]
	instr_sra =?=> [alu_shr, cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_sra]
	cached_ascii_instr =?=> [cached_ascii_instr]
	dbg_valid_insn =?=> [dbg_valid_insn]
	instr_sb =?=> [instr_sb]
	instr_bne =?=> [alu_out, instr_bne, alu_out_0]
	mem_rdata_word =?=> [mem_rdata_word]
	pcpi_timeout =?=> [pcpi_timeout]
	dbg_next =?=> [q_insn_rd, q_insn_imm, dbg_insn_rd, dbg_insn_rs2, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, dbg_insn_opcode, dbg_next]
	latched_compr =?=> [latched_compr]
	instr_lb =?=> [instr_lb]
	mem_do_rinst =?=> [mem_do_rinst]
	reg_pc =?=> [reg_pc]
	mem_do_wdata =?=> [mem_do_wdata]
	pcpi_timeout_counter =?=> [current_pc]
	instr_slti =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_slti, is_slti_blt_slt, alu_out_0]
	decoder_trigger_q =?=> [cached_insn_imm, cached_ascii_instr, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoder_trigger_q]
	dbg_insn_imm =?=> [q_insn_imm, dbg_insn_imm]
	latched_store =?=> [cpuregs_wrdata, dbg_insn_addr, latched_store, cpuregs_write]
	dbg_insn_rs2 =?=> [dbg_insn_rs2, q_insn_rs2]
	irq_delay =?=> [irq_delay]
	set_mem_do_rdata =?=> [set_mem_do_rdata]
	decoder_pseudo_trigger =?=> [pcpi_insn, dbg_insn_rd, dbg_insn_rs2, decoded_imm, dbg_insn_rs1, new_ascii_instr, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_slli, instr_srli, instr_srai, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_maskirq, instr_timer, decoder_pseudo_trigger, decoder_pseudo_trigger_q, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra]
	instr_beq =?=> [alu_out, instr_beq, alu_out_0]
	dbg_insn_opcode =?=> [q_insn_opcode, dbg_insn_opcode]
	dbg_rs2val =?=> [dbg_rs2val]
	q_insn_imm =?=> [q_insn_imm]
	new_ascii_instr =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr]
	instr_rdcycleh =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_rdcycleh]
	instr_rdcycle =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_rdcycle]
	dbg_insn_rd =?=> [q_insn_rd, dbg_insn_rd]
	latched_stalu =?=> [latched_stalu]
	prefetched_high_word =?=> [prefetched_high_word]
	reg_op1 =?=> [alu_shr, alu_shl, alu_add_sub, reg_op1, alu_eq, alu_ltu, alu_lts]
	instr_jal =?=> [instr_jal, is_lui_auipc_jal]
	instr_srli =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_srli]
	instr_ori =?=> [alu_out, cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_ori]
	cpuregs_write =?=> [cpuregs_write]
	pcpi_insn =?=> [pcpi_insn]
	instr_bge =?=> [alu_out, instr_bge, alu_out_0]
	is_alu_reg_reg =?=> [is_sll_srl_sra, is_alu_reg_reg]
	instr_bgeu =?=> [alu_out, instr_bgeu, alu_out_0]
	mem_rdata_q =?=> [mem_rdata_q, instr_ecall_ebreak]
	instr_waitirq =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_waitirq]
	is_lbu_lhu_lw =?=> [is_lbu_lhu_lw]
	decoded_rs1 =?=> [cached_insn_rs1, cpuregs_rs1, decoded_rs1, dbg_insn_rs1, q_insn_rs1]
	instr_xori =?=> [alu_out, cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_xori]
	dbg_rs1val =?=> [dbg_rs1val]
	instr_getq =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_getq]
	instr_xor =?=> [alu_out, cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_xor]
	instr_timer =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_timer]
	latched_is_lb =?=> [latched_is_lb]
	mem_la_wstrb =?=> [mem_la_wstrb]
	mem_do_rdata =?=> [mem_do_rdata]
	clear_prefetched_high_word_q =?=> [clear_prefetched_high_word_q]
	is_lui_auipc_jal =?=> [is_lui_auipc_jal]
	instr_auipc =?=> [instr_auipc, is_lui_auipc_jal]
	is_jalr_addi_slti_sltiu_xori_ori_andi =?=> [is_jalr_addi_slti_sltiu_xori_ori_andi]
	decoded_rd =?=> [q_insn_rd, cached_insn_rd, dbg_insn_rd, decoded_rd]
	instr_addi =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_addi]
	decoded_rs =?=> [decoded_rs]
	cached_insn_rd =?=> [cached_insn_rd]
	alu_ltu =?=> [alu_out, alu_out_0, alu_ltu]
	instr_sw =?=> [instr_sw]
	latched_rd =?=> [latched_rd]
	instr_lbu =?=> [instr_lbu]
	alu_out =?=> [alu_out_q, alu_out]
	count_cycle =?=> [count_cycle]
	instr_jalr =?=> [instr_jalr]
	cached_insn_rs2 =?=> [cached_insn_rs2]
	mem_wordsize =?=> [mem_rdata_word, mem_wordsize, mem_la_wstrb, mem_la_wdata]
	dbg_rs1val_valid =?=> [dbg_rs1val_valid]
	dbg_rs2val_valid =?=> [dbg_rs2val_valid]
	is_compare =?=> [alu_out, is_compare]
	irq_state =?=> [irq_state]
	instr_srai =?=> [alu_shr, cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_srai]
	compressed_instr =?=> [compressed_instr]
	pcpi_valid =?=> [pcpi_valid]
	is_sb_sh_sw =?=> [is_sb_sh_sw]
	decoded_imm =?=> [cached_insn_imm, q_insn_imm, decoded_imm, dbg_insn_imm]
	instr_add =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_add]
	is_slti_blt_slt =?=> [alu_out, is_slti_blt_slt, alu_out_0]
	latched_is_lu =?=> [latched_is_lu]
	instr_sll =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_sll]
	instr_rdinstr =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_rdinstr]
	instr_retirq =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_retirq]
	instr_and =?=> [alu_out, cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_and]
	cpuregs_wrdata =?=> [cpuregs_wrdata]
	alu_shl =?=> [alu_shl]
	trap =?=> [trap]
	mem_la_firstword_reg =?=> [mem_la_firstword_reg]
	is_slli_srli_srai =?=> [is_slli_srli_srai]
	latched_trace =?=> [latched_trace]
	dbg_ascii_instr =?=> [dbg_ascii_instr, q_ascii_instr]
	mem_valid =?=> [mem_rdata_q, next_insn_opcode, mem_valid]
	instr_sub =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_sub]
	instr_lw =?=> [instr_lw, is_lbu_lhu_lw]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [is_beq_bne_blt_bge_bltu_bgeu]
	dbg_ascii_state =?=> [dbg_ascii_state]
	clear_prefetched_high_word =?=> [clear_prefetched_high_word, clear_prefetched_high_word_q]
	decoder_trigger =?=> [alu_out, pcpi_insn, dbg_rs2val, dbg_rs1val, dbg_insn_rd, dbg_insn_rs2, decoded_imm, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, new_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_slli, instr_srli, instr_srai, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_maskirq, instr_timer, decoder_trigger, decoder_trigger_q, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, dbg_rs1val_valid, dbg_next]
	cached_insn_imm =?=> [cached_insn_imm]
	q_insn_rs2 =?=> [q_insn_rs2]
	q_ascii_instr =?=> [q_ascii_instr]
	mem_state =?=> [mem_state]
	latched_is_lh =?=> [latched_is_lh]
	instr_maskirq =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_maskirq]
	instr_blt =?=> [alu_out, instr_blt, is_slti_blt_slt, alu_out_0]
	is_lb_lh_lw_lbu_lhu =?=> [instr_lb, is_lb_lh_lw_lbu_lhu]
	pcpi_int_rd =?=> [pcpi_int_rd]
	is_alu_reg_imm =?=> [is_jalr_addi_slti_sltiu_xori_ori_andi, is_alu_reg_imm]
	alu_wait =?=> [alu_wait]
	irq_mask =?=> [irq_mask]
	instr_srl =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_srl]
	is_sltiu_bltu_sltu =?=> [alu_out, is_sltiu_bltu_sltu, alu_out_0]
	alu_eq =?=> [alu_out, alu_out_0, alu_eq]
	instr_ecall_ebreak =?=> [instr_ecall_ebreak]
	do_waitirq =?=> [do_waitirq]
	cached_insn_opcode =?=> [cached_insn_opcode]
	dbg_insn_addr =?=> [dbg_insn_addr]
	pcpi_int_wait =?=> [pcpi_int_wait]
	last_mem_valid =?=> [last_mem_valid]
	instr_lh =?=> [instr_lh]
	is_sll_srl_sra =?=> [is_sll_srl_sra]
	next_insn_opcode =?=> [cached_insn_opcode, q_insn_opcode, dbg_insn_opcode, next_insn_opcode]
	mem_wstrb =?=> [mem_wstrb]
	eoi =?=> [eoi]
	instr_lhu =?=> [instr_lhu]
	instr_or =?=> [alu_out, cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_or]
	reg_op2 =?=> [alu_add_sub, reg_op2, mem_la_wdata, alu_eq, alu_ltu, alu_lts]
	instr_rdinstrh =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_rdinstrh]
	decoded_rs2 =?=> [cached_insn_rs2, cpuregs_rs2, dbg_insn_rs2, decoded_rs2, q_insn_rs2]
	mem_la_secondword =?=> [mem_la_secondword]
	reg_next_pc =?=> [dbg_insn_addr, reg_next_pc]
	irq_pending =?=> [irq_pending]
	latched_branch =?=> [cpuregs_wrdata, dbg_insn_addr, latched_branch, cpuregs_write]
	set_mem_do_wdata =?=> [set_mem_do_wdata]
	mem_do_prefetch =?=> [mem_do_prefetch]
	reg_sh =?=> [reg_sh]
	instr_sltu =?=> [cached_ascii_instr, dbg_ascii_instr, new_ascii_instr, q_ascii_instr, instr_sltu, is_sltiu_bltu_sltu, alu_out_0]
	pcpi_int_ready =?=> [pcpi_int_ready]
	q_insn_rd =?=> [q_insn_rd]
	trace_valid =?=> [trace_valid]
	current_pc =?=> [current_pc]
	alu_out_0 =?=> [alu_out, alu_out_0, alu_out_0_q]
	instr_sh =?=> [instr_sh]
	count_instr =?=> [count_instr]
	reg_out =?=> [reg_out, dbg_insn_addr]
	mem_addr =?=> [mem_addr]
case: 114
	instr_andi =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	cpuregs_rs1 =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_sltiu =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	is_lui_auipc_jal_jalr_addi_add_sub =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_lui =?=> [is_lbu_lhu_lw]
	alu_out_q =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_slt =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	alu_add_sub =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_slti =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_rdcycleh =?=> [is_lbu_lhu_lw]
	instr_rdcycle =?=> [is_lbu_lhu_lw]
	reg_op1 =?=> [reg_pc, count_instr, dbg_rs2val, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_ori =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	cpuregs_write =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb]
	decoded_rs1 =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_xori =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_xor =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	is_lui_auipc_jal =?=> [is_lbu_lhu_lw]
	instr_auipc =?=> [is_lbu_lhu_lw]
	is_jalr_addi_slti_sltiu_xori_ori_andi =?=> [is_lbu_lhu_lw]
	decoded_rd =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_addi =?=> [is_lbu_lhu_lw]
	instr_sw =?=> [cached_insn_imm, q_insn_imm, is_lbu_lhu_lw]
	latched_rd =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	alu_out =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	is_compare =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	compressed_instr =?=> [cached_ascii_instr, q_insn_rd, cached_insn_rd, cached_insn_opcode, q_ascii_instr, q_insn_opcode, mem_la_secondword, is_lbu_lhu_lw]
	is_sb_sh_sw =?=> [is_lbu_lhu_lw]
	decoded_imm =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_sh, reg_next_pc, mem_la_wstrb, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_rdinstr =?=> [is_lbu_lhu_lw]
	instr_and =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	cpuregs_wrdata =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	is_slli_srli_srai =?=> [is_lbu_lhu_lw]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [is_slti_blt_slt, is_lbu_lhu_lw]
	is_alu_reg_imm =?=> [is_lbu_lhu_lw]
	is_sll_srl_sra =?=> [cached_insn_imm, cached_ascii_instr, q_insn_imm, q_ascii_instr, is_lbu_lhu_lw]
	instr_or =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	reg_op2 =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_rdinstrh =?=> [is_lbu_lhu_lw]
	instr_sltu =?=> [reg_pc, count_instr, dbg_rs2val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
case: 117
	instr_andi =?=> [mem_wdata, cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	cpuregs_rs1 =?=> [mem_wdata, cached_insn_imm, cached_ascii_instr, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	instr_sltiu =?=> [mem_wdata, cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_lbu_lhu_lw]
	is_lui_auipc_jal_jalr_addi_add_sub =?=> [mem_wdata, cached_insn_imm, cached_ascii_instr, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	instr_lui =?=> [is_sltiu_bltu_sltu]
	alu_out_q =?=> [mem_wdata, cached_insn_imm, cached_ascii_instr, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	instr_slt =?=> [mem_wdata, cached_insn_imm, q_insn_imm, is_sltiu_bltu_sltu, is_lbu_lhu_lw]
	alu_add_sub =?=> [mem_wdata, cached_insn_imm, cached_ascii_instr, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	instr_slti =?=> [mem_wdata, cached_insn_imm, q_insn_imm, is_sltiu_bltu_sltu, is_lbu_lhu_lw]
	decoder_pseudo_trigger =?=> [is_sltiu_bltu_sltu]
	instr_rdcycleh =?=> [is_sltiu_bltu_sltu]
	instr_rdcycle =?=> [is_sltiu_bltu_sltu]
	reg_op1 =?=> [mem_wdata, cached_insn_imm, cached_ascii_instr, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst]
	instr_ori =?=> [mem_wdata, cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	cpuregs_write =?=> [mem_wdata, alu_out_q, cached_insn_imm, cached_ascii_instr, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	decoded_rs1 =?=> [mem_wdata, cached_insn_imm, cached_ascii_instr, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	instr_xori =?=> [mem_wdata, cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	instr_xor =?=> [mem_wdata, cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	is_lui_auipc_jal =?=> [is_sltiu_bltu_sltu]
	instr_auipc =?=> [is_sltiu_bltu_sltu]
	is_jalr_addi_slti_sltiu_xori_ori_andi =?=> [is_sltiu_bltu_sltu]
	decoded_rd =?=> [mem_wdata, alu_out_q, cached_insn_imm, cached_ascii_instr, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	instr_addi =?=> [is_sltiu_bltu_sltu]
	instr_sw =?=> [alu_out_q, is_slti_blt_slt, is_sltiu_bltu_sltu, set_mem_do_rinst, alu_out_0_q]
	latched_rd =?=> [mem_wdata, alu_out_q, cached_insn_imm, cached_ascii_instr, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	alu_out =?=> [mem_wdata, cached_insn_imm, cached_ascii_instr, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	is_compare =?=> [mem_wdata, cached_insn_imm, cached_ascii_instr, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	compressed_instr =?=> [alu_out_q, cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, set_mem_do_rinst, alu_out_0_q]
	is_sb_sh_sw =?=> [is_slti_blt_slt, is_sltiu_bltu_sltu, set_mem_do_rinst, alu_out_0_q]
	decoded_imm =?=> [mem_wdata, cached_ascii_instr, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	instr_rdinstr =?=> [is_sltiu_bltu_sltu]
	instr_and =?=> [mem_wdata, cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	cpuregs_wrdata =?=> [mem_wdata, alu_out_q, cached_insn_imm, cached_ascii_instr, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	is_slli_srli_srai =?=> [is_sltiu_bltu_sltu]
	instr_lw =?=> [alu_shr, alu_shl, alu_add_sub, dbg_ascii_state, cpu_state, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, mem_do_rinst, dbg_rs1val_valid, alu_eq, alu_ltu, alu_lts]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [is_sltiu_bltu_sltu]
	is_lb_lh_lw_lbu_lhu =?=> [is_sltiu_bltu_sltu]
	is_alu_reg_imm =?=> [is_sltiu_bltu_sltu]
	is_sll_srl_sra =?=> [alu_out_q, is_slti_blt_slt, is_sltiu_bltu_sltu, set_mem_do_rinst, alu_out_0_q]
	instr_or =?=> [mem_wdata, cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	reg_op2 =?=> [cached_insn_imm, cached_ascii_instr, q_insn_imm, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst]
	instr_rdinstrh =?=> [is_sltiu_bltu_sltu]
	instr_sltu =?=> [mem_wdata, cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_lbu_lhu_lw]
case: 113
	instr_andi =?=> [mem_addr, dbg_ascii_state, cpu_state]
	cpuregs_rs1 =?=> [mem_addr, dbg_ascii_state, cpu_state]
	mem_la_wdata =?=> [mem_wdata]
	instr_sltiu =?=> [mem_addr, dbg_ascii_state, cpu_state]
	is_lui_auipc_jal_jalr_addi_add_sub =?=> [mem_addr, dbg_ascii_state, cpu_state]
	instr_lui =?=> [instr_lw, instr_slt, set_mem_do_rinst]
	alu_out_q =?=> [mem_addr, dbg_ascii_state, cpu_state]
	instr_slt =?=> [mem_addr, dbg_ascii_state, cpu_state]
	alu_add_sub =?=> [mem_addr, dbg_ascii_state, cpu_state]
	cpuregs_rs2 =?=> [mem_wdata]
	instr_sb =?=> [mem_wdata]
	instr_slti =?=> [mem_addr, dbg_ascii_state, cpu_state]
	decoder_pseudo_trigger =?=> [instr_slt, is_lui_auipc_jal, set_mem_do_rinst]
	instr_rdcycleh =?=> [instr_lw, instr_slt, is_lui_auipc_jal, set_mem_do_rinst]
	instr_rdcycle =?=> [instr_lw, instr_slt, is_lui_auipc_jal, set_mem_do_rinst]
	reg_op1 =?=> [mem_addr, dbg_ascii_state, cpu_state]
	instr_ori =?=> [mem_addr, dbg_ascii_state, cpu_state]
	cpuregs_write =?=> [mem_addr, dbg_ascii_state, cpu_state, cpuregs_wrdata]
	decoded_rs1 =?=> [mem_addr, dbg_ascii_state, cpu_state]
	instr_xori =?=> [mem_addr, dbg_ascii_state, cpu_state]
	instr_xor =?=> [mem_addr, dbg_ascii_state, cpu_state]
	is_lui_auipc_jal =?=> [instr_lw, instr_slt, set_mem_do_rinst]
	instr_auipc =?=> [instr_lw, instr_slt, set_mem_do_rinst]
	is_jalr_addi_slti_sltiu_xori_ori_andi =?=> [instr_lw, instr_slt, is_lui_auipc_jal, set_mem_do_rinst]
	decoded_rd =?=> [mem_addr, dbg_ascii_state, cpu_state, cpuregs_wrdata]
	instr_addi =?=> [instr_lw, instr_slt, is_lui_auipc_jal, set_mem_do_rinst]
	instr_sw =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_opcode, mem_valid, mem_instr, mem_la_secondword, instr_lw]
	latched_rd =?=> [mem_addr, dbg_ascii_state, cpu_state, cpuregs_wrdata]
	alu_out =?=> [mem_addr, dbg_ascii_state, cpu_state]
	mem_wordsize =?=> [mem_wdata]
	is_compare =?=> [mem_addr, dbg_ascii_state, cpu_state]
	compressed_instr =?=> [mem_wdata, pcpi_insn, mem_wstrb, cpuregs_rs1, dbg_insn_rd, mem_state, dbg_ascii_instr, new_ascii_instr, dbg_insn_opcode, mem_valid, mem_instr, mem_do_prefetch, mem_do_rinst, instr_lw, instr_sw, decoder_trigger_q, decoder_pseudo_trigger_q, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	is_sb_sh_sw =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_opcode, q_insn_opcode, mem_valid, mem_instr, mem_la_secondword, instr_lw]
	decoded_imm =?=> [mem_addr, dbg_ascii_state, cpu_state]
	instr_rdinstr =?=> [instr_lw, instr_slt, is_lui_auipc_jal, set_mem_do_rinst]
	instr_and =?=> [mem_addr, dbg_ascii_state, cpu_state]
	cpuregs_wrdata =?=> [mem_addr, dbg_ascii_state, cpu_state]
	is_slli_srli_srai =?=> [instr_lw, instr_slt, is_lui_auipc_jal, set_mem_do_rinst]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [instr_lw, instr_slti, instr_slt, is_lui_auipc_jal]
	is_lb_lh_lw_lbu_lhu =?=> [instr_slt, is_lui_auipc_jal, set_mem_do_rinst]
	is_alu_reg_imm =?=> [instr_lw, instr_slt, is_lui_auipc_jal, set_mem_do_rinst]
	is_sll_srl_sra =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_opcode, decoded_imm, dbg_insn_imm, dbg_ascii_instr, new_ascii_instr, q_insn_opcode, mem_valid, mem_instr, mem_la_secondword, instr_lw, instr_sw]
	instr_or =?=> [mem_addr, dbg_ascii_state, cpu_state]
	reg_op2 =?=> [mem_wdata, mem_addr, dbg_ascii_state, cpu_state]
	instr_rdinstrh =?=> [instr_lw, instr_slt, is_lui_auipc_jal, set_mem_do_rinst]
	decoded_rs2 =?=> [mem_wdata]
	instr_sltu =?=> [mem_addr, dbg_ascii_state, cpu_state]
	instr_sh =?=> [mem_wdata]
case: 110
	instr_andi =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	instr_sltiu =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	is_lui_auipc_jal_jalr_addi_add_sub =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	instr_lui =?=> [is_slti_blt_slt, is_compare, alu_out_0]
	alu_out_q =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	instr_slt =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	alu_add_sub =?=> [alu_shr, alu_shl, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	instr_slti =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	decoder_pseudo_trigger =?=> [is_slti_blt_slt, is_compare, alu_out_0]
	instr_rdcycleh =?=> [cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_compare, alu_out_0]
	instr_rdcycle =?=> [cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_compare, alu_out_0]
	reg_op1 =?=> [dbg_rs1val]
	instr_jal =?=> [is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, set_mem_do_rinst, alu_out_0_q]
	instr_ori =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	cpuregs_write =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	mem_rdata_q =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, is_lui_auipc_jal, is_sll_srl_sra, set_mem_do_rinst]
	instr_xori =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	instr_xor =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	is_lui_auipc_jal =?=> [cached_insn_imm, cached_ascii_instr, q_insn_imm, q_ascii_instr, is_slti_blt_slt, is_compare, alu_out_0]
	instr_auipc =?=> [is_slti_blt_slt, is_compare, alu_out_0]
	is_jalr_addi_slti_sltiu_xori_ori_andi =?=> [cached_insn_imm, cached_ascii_instr, q_insn_imm, q_ascii_instr, is_slti_blt_slt, is_compare, alu_out_0]
	decoded_rd =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	instr_addi =?=> [cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_compare, alu_out_0]
	instr_sw =?=> [alu_shr, alu_shl, alu_add_sub, dbg_ascii_state, cpu_state, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, mem_do_rinst, dbg_rs1val_valid, alu_eq, alu_ltu, alu_lts]
	latched_rd =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	alu_out =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	instr_jalr =?=> [alu_shr, alu_shl, cached_insn_imm, q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, mem_rdata_word, mem_wordsize, q_insn_rs2, q_insn_opcode, q_insn_rs1, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, trap, mem_do_rdata, mem_do_wdata, decoder_pseudo_trigger, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, dbg_rs2val_valid, set_mem_do_rinst, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_is_lu, latched_is_lh, latched_is_lb, alu_out_0_q, alu_eq, alu_ltu, alu_lts]
	is_compare =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	is_sb_sh_sw =?=> [alu_shr, alu_shl, dbg_ascii_state, cpu_state, dbg_rs2val, dbg_rs1val, reg_sh, reg_op1, mem_do_rinst, dbg_rs1val_valid]
	decoded_imm =?=> [alu_shr, alu_shl, dbg_rs1val, reg_op1]
	instr_rdinstr =?=> [cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_compare, alu_out_0]
	instr_retirq =?=> [reg_pc, alu_shr, alu_shl, alu_out_q, cached_insn_imm, q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, mem_rdata_word, mem_wordsize, q_insn_rs2, q_insn_opcode, q_insn_rs1, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, trap, mem_do_rdata, mem_do_wdata, decoder_pseudo_trigger, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, dbg_rs2val_valid, set_mem_do_rinst, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_is_lu, latched_is_lh, latched_is_lb, alu_out_0_q, alu_eq, alu_ltu, alu_lts]
	instr_and =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	cpuregs_wrdata =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	is_slli_srli_srai =?=> [cached_insn_imm, cached_ascii_instr, q_insn_imm, q_ascii_instr, is_slti_blt_slt, is_compare, alu_out_0]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [cached_ascii_instr, q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_la_secondword]
	is_lb_lh_lw_lbu_lhu =?=> [cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_compare, alu_out_0]
	is_alu_reg_imm =?=> [is_slti_blt_slt, is_compare, alu_out_0]
	is_sll_srl_sra =?=> [dbg_ascii_state, cpu_state, cpuregs_wrdata, mem_do_rinst]
	instr_or =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	reg_op2 =?=> [dbg_rs1val, reg_op1]
	instr_rdinstrh =?=> [cached_insn_imm, q_insn_imm, is_slti_blt_slt, is_compare, alu_out_0]
	instr_sltu =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
case: 1
	instr_andi =?=> [alu_out_q]
	instr_bltu =?=> [alu_out_q, alu_out_0_q]
	instr_sltiu =?=> [alu_out_0_q]
	is_lui_auipc_jal_jalr_addi_add_sub =?=> [alu_out_q]
	alu_lts =?=> [alu_out_q, alu_out_0_q]
	instr_slt =?=> [alu_out_0_q]
	instr_bne =?=> [alu_out_q, alu_out_0_q]
	instr_slti =?=> [alu_out_0_q]
	decoder_pseudo_trigger =?=> [cached_insn_imm, cached_ascii_instr, q_insn_rd, q_insn_imm, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, is_lbu_lhu_lw]
	instr_beq =?=> [alu_out_q, alu_out_0_q]
	instr_ori =?=> [alu_out_q]
	instr_bge =?=> [alu_out_q, alu_out_0_q]
	instr_bgeu =?=> [alu_out_q, alu_out_0_q]
	instr_xori =?=> [alu_out_q]
	instr_xor =?=> [alu_out_q]
	alu_ltu =?=> [alu_out_q, alu_out_0_q]
	is_compare =?=> [alu_out_q]
	is_slti_blt_slt =?=> [alu_out_q, alu_out_0_q]
	instr_and =?=> [alu_out_q]
	mem_valid =?=> [cached_insn_opcode, q_insn_opcode]
	decoder_trigger =?=> [alu_out_q, cached_insn_imm, cached_ascii_instr, q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, is_lbu_lhu_lw]
	instr_blt =?=> [alu_out_q, alu_out_0_q]
	is_alu_reg_imm =?=> [cached_ascii_instr, q_ascii_instr]
	is_sltiu_bltu_sltu =?=> [alu_out_q, alu_out_0_q]
	alu_eq =?=> [alu_out_q, alu_out_0_q]
	instr_or =?=> [alu_out_q]
	instr_sltu =?=> [alu_out_0_q]
	alu_out_0 =?=> [alu_out_q]
case: 116
	instr_andi =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	cpuregs_rs1 =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, new_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	instr_sltiu =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, set_mem_do_rinst, set_mem_do_wdata]
	is_lui_auipc_jal_jalr_addi_add_sub =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, new_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_compare, set_mem_do_wdata, alu_out_0]
	instr_lui =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_slli_srli_srai, is_sll_srl_sra]
	alu_out_q =?=> [alu_out, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, new_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	instr_slt =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, set_mem_do_rinst, set_mem_do_wdata]
	alu_add_sub =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, new_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	instr_slti =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, set_mem_do_rinst, set_mem_do_wdata]
	decoder_pseudo_trigger =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and]
	instr_rdcycleh =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_slli_srli_srai, is_sll_srl_sra]
	instr_rdcycle =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_slli_srli_srai, is_sll_srl_sra]
	reg_op1 =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, new_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata]
	instr_ori =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	cpuregs_write =?=> [alu_out, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, new_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	decoded_rs1 =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_opcode, decoded_imm, dbg_insn_imm, new_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	instr_xori =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	instr_xor =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	is_lui_auipc_jal =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_slli_srli_srai, is_sll_srl_sra]
	instr_auipc =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_slli_srli_srai, is_sll_srl_sra]
	is_jalr_addi_slti_sltiu_xori_ori_andi =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_slli_srli_srai, is_sll_srl_sra]
	decoded_rd =?=> [alu_out, mem_wstrb, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, new_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	instr_addi =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_slli_srli_srai, is_sll_srl_sra]
	instr_sw =?=> [alu_out, cached_insn_rs2, cached_insn_rs1, q_insn_rs2, q_insn_rs1, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, alu_out_0]
	latched_rd =?=> [alu_out, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, new_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	alu_out =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, new_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	is_compare =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, new_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, set_mem_do_wdata, alu_out_0]
	compressed_instr =?=> [alu_out, cached_insn_rs2, cached_insn_rs1, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_rs1, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, alu_out_0]
	is_sb_sh_sw =?=> [cached_insn_rs2, cached_insn_rs1, q_insn_rs2, q_insn_rs1, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, alu_out_0]
	decoded_imm =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, new_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	instr_rdinstr =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstrh, instr_ecall_ebreak, is_slli_srli_srai, is_sll_srl_sra]
	instr_and =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	cpuregs_wrdata =?=> [alu_out, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, new_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	is_slli_srli_srai =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_sll_srl_sra]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_slli_srli_srai, is_sll_srl_sra]
	is_lb_lh_lw_lbu_lhu =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_sb, instr_sh, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_slli_srli_srai, is_sll_srl_sra]
	is_alu_reg_imm =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_sll_srl_sra]
	is_sll_srl_sra =?=> [alu_out, cached_insn_rs2, cached_insn_rs1, q_insn_rs2, q_insn_rs1, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, alu_out_0]
	instr_or =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata, alu_out_0]
	reg_op2 =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, new_ascii_instr, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, set_mem_do_wdata]
	instr_rdinstrh =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_ecall_ebreak, is_slli_srli_srai, is_sll_srl_sra]
	instr_sltu =?=> [q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_do_prefetch, mem_do_wdata, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, set_mem_do_rinst, set_mem_do_wdata]
case: 115
	instr_andi =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	cpuregs_rs1 =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	instr_sltiu =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	is_lui_auipc_jal_jalr_addi_add_sub =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	instr_lui =?=> [instr_jalr]
	alu_out_q =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	instr_slt =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	alu_add_sub =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	instr_slti =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	decoder_pseudo_trigger =?=> [instr_jalr]
	instr_rdcycleh =?=> [instr_jalr]
	instr_rdcycle =?=> [instr_jalr]
	reg_op1 =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	instr_ori =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	cpuregs_write =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	decoded_rs1 =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rd, mem_state, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	instr_xori =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	instr_xor =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	is_lui_auipc_jal =?=> [instr_jalr]
	instr_auipc =?=> [instr_jalr]
	is_jalr_addi_slti_sltiu_xori_ori_andi =?=> [instr_jalr]
	decoded_rd =?=> [pcpi_insn, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, mem_state, dbg_insn_rs1, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	instr_addi =?=> [instr_jalr]
	instr_sw =?=> [cpuregs_rs2, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, mem_rdata_q, dbg_insn_rs1, next_insn_opcode, instr_lui, instr_auipc, instr_jal, instr_jalr, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
	latched_rd =?=> [pcpi_insn, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	alu_out =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	is_compare =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	compressed_instr =?=> [cpuregs_rs2, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_rdata_q, dbg_insn_rs1, next_insn_opcode, instr_lui, instr_auipc, instr_jal, instr_jalr, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
	is_sb_sh_sw =?=> [cpuregs_rs2, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, mem_rdata_q, dbg_insn_rs1, next_insn_opcode, instr_lui, instr_auipc, instr_jal, instr_jalr, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
	decoded_imm =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	instr_rdinstr =?=> [instr_jalr]
	instr_and =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	cpuregs_wrdata =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	is_slli_srli_srai =?=> [instr_jalr]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [decoded_imm_j, decoded_rs2, decoded_rs1, instr_jalr]
	is_lb_lh_lw_lbu_lhu =?=> [instr_jalr]
	is_alu_reg_imm =?=> [instr_jalr]
	is_sll_srl_sra =?=> [cpuregs_rs2, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, mem_rdata_q, dbg_insn_rs1, next_insn_opcode, instr_lui, instr_auipc, instr_jal, instr_jalr, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
	instr_or =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	reg_op2 =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	instr_rdinstrh =?=> [instr_jalr]
	instr_sltu =?=> [pcpi_insn, cpuregs_rs2, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
case: 108
	instr_andi =?=> [cpuregs_rs1]
	instr_sltiu =?=> [cpuregs_rs1]
	is_lui_auipc_jal_jalr_addi_add_sub =?=> [cpuregs_rs1]
	instr_lui =?=> [mem_wdata, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_sb_sh_sw, is_alu_reg_imm, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	alu_out_q =?=> [cpuregs_rs1]
	instr_slt =?=> [cpuregs_rs1]
	alu_add_sub =?=> [cpuregs_rs1]
	reg_pc =?=> [mem_rdata_q, next_insn_opcode, is_beq_bne_blt_bge_bltu_bgeu]
	instr_slti =?=> [cpuregs_rs1]
	latched_store =?=> [mem_rdata_q, next_insn_opcode, is_beq_bne_blt_bge_bltu_bgeu]
	decoder_pseudo_trigger =?=> [mem_wdata, cpuregs_rs2, cpuregs_rs1, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, is_sb_sh_sw, is_alu_reg_imm, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	instr_rdcycleh =?=> [mem_wdata, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_sb_sh_sw, is_lui_auipc_jal_jalr_addi_add_sub, is_alu_reg_imm, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	instr_rdcycle =?=> [mem_wdata, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_sb_sh_sw, is_lui_auipc_jal_jalr_addi_add_sub, is_alu_reg_imm, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	reg_op1 =?=> [cpuregs_rs1]
	instr_jal =?=> [cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_rdata_q, dbg_insn_rs1, dbg_insn_opcode, next_insn_opcode, instr_lui, instr_auipc, instr_jalr, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
	instr_ori =?=> [cpuregs_rs1]
	cpuregs_write =?=> [cpuregs_rs1]
	mem_rdata_q =?=> [mem_wdata, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_sb_sh_sw, is_alu_reg_imm, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	instr_xori =?=> [cpuregs_rs1]
	instr_xor =?=> [cpuregs_rs1]
	is_lui_auipc_jal =?=> [mem_wdata, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_sb_sh_sw, is_lui_auipc_jal_jalr_addi_add_sub, is_alu_reg_imm, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	instr_auipc =?=> [mem_wdata, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_sb_sh_sw, is_alu_reg_imm, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	is_jalr_addi_slti_sltiu_xori_ori_andi =?=> [mem_wdata, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_sb_sh_sw, is_lui_auipc_jal_jalr_addi_add_sub, is_alu_reg_imm, dbg_rs1val_valid, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	decoded_rd =?=> [cpuregs_rs1]
	instr_addi =?=> [mem_wdata, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_sb_sh_sw, is_alu_reg_imm, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	latched_rd =?=> [cpuregs_rs1]
	alu_out =?=> [cpuregs_rs1]
	instr_jalr =?=> [reg_pc, cpuregs_rs2, cpuregs_rs1, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_rdata_q, next_insn_opcode, reg_next_pc, instr_lui, instr_auipc, instr_jal, decoder_trigger, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
	is_compare =?=> [cpuregs_rs1]
	compressed_instr =?=> [reg_pc]
	is_sb_sh_sw =?=> [cpuregs_rs1]
	decoded_imm =?=> [cpuregs_rs1]
	instr_rdinstr =?=> [mem_wdata, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_sb_sh_sw, is_lui_auipc_jal_jalr_addi_add_sub, is_alu_reg_imm, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	instr_retirq =?=> [cpuregs_rs2, cpuregs_rs1, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, instr_jalr, decoder_trigger, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
	instr_and =?=> [cpuregs_rs1]
	cpuregs_wrdata =?=> [cpuregs_rs1]
	is_slli_srli_srai =?=> [mem_wdata, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_sb_sh_sw, is_lui_auipc_jal_jalr_addi_add_sub, is_alu_reg_imm, dbg_rs1val_valid, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [reg_pc, alu_shr, alu_shl, cpuregs_rs1, count_instr, dbg_rs2val, dbg_rs1val, mem_rdata_word, mem_wordsize, reg_sh, reg_op1, reg_next_pc, mem_la_wstrb, trap, mem_do_rinst, mem_do_rdata, mem_do_wdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, set_mem_do_wdata, latched_is_lu, latched_is_lh, latched_is_lb]
	is_lb_lh_lw_lbu_lhu =?=> [mem_wdata, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_sb_sh_sw, is_lui_auipc_jal_jalr_addi_add_sub, is_alu_reg_imm, dbg_rs1val_valid, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	is_alu_reg_imm =?=> [mem_wdata, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_sb_sh_sw, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	instr_or =?=> [cpuregs_rs1]
	reg_op2 =?=> [cpuregs_rs1]
	instr_rdinstrh =?=> [mem_wdata, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_sb_sh_sw, is_lui_auipc_jal_jalr_addi_add_sub, is_alu_reg_imm, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	reg_next_pc =?=> [mem_rdata_q, next_insn_opcode, is_beq_bne_blt_bge_bltu_bgeu]
	latched_branch =?=> [mem_rdata_q, next_insn_opcode, is_beq_bne_blt_bge_bltu_bgeu]
	instr_sltu =?=> [cpuregs_rs1]
case: 119
	instr_andi =?=> [mem_rdata_q, next_insn_opcode]
	cpuregs_rs1 =?=> [mem_rdata_q, next_insn_opcode]
	instr_sltiu =?=> [mem_rdata_q, next_insn_opcode]
	is_lui_auipc_jal_jalr_addi_add_sub =?=> [mem_rdata_q, next_insn_opcode]
	alu_out_q =?=> [mem_rdata_q, next_insn_opcode]
	instr_slt =?=> [mem_rdata_q, next_insn_opcode]
	alu_add_sub =?=> [mem_rdata_q, next_insn_opcode]
	instr_slti =?=> [mem_rdata_q, next_insn_opcode]
	reg_op1 =?=> [mem_rdata_q, next_insn_opcode]
	instr_ori =?=> [mem_rdata_q, next_insn_opcode]
	cpuregs_write =?=> [mem_rdata_q, next_insn_opcode]
	decoded_rs1 =?=> [mem_rdata_q, next_insn_opcode]
	instr_xori =?=> [mem_rdata_q, next_insn_opcode]
	instr_xor =?=> [mem_rdata_q, next_insn_opcode]
	decoded_rd =?=> [mem_rdata_q, next_insn_opcode]
	latched_rd =?=> [mem_rdata_q, next_insn_opcode]
	alu_out =?=> [mem_rdata_q, next_insn_opcode]
	is_compare =?=> [mem_rdata_q, next_insn_opcode]
	decoded_imm =?=> [mem_rdata_q, next_insn_opcode]
	instr_and =?=> [mem_rdata_q, next_insn_opcode]
	cpuregs_wrdata =?=> [mem_rdata_q, next_insn_opcode]
	instr_lw =?=> [pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rs2, decoded_imm_j, decoded_rs2, decoded_rs1, mem_state, dbg_insn_rs1, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_alu_reg_imm, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	instr_or =?=> [mem_rdata_q, next_insn_opcode]
	reg_op2 =?=> [mem_rdata_q, next_insn_opcode]
	instr_sltu =?=> [mem_rdata_q, next_insn_opcode]
case: 107_113
	instr_andi =?=> [cpuregs_wrdata]
	cpuregs_rs1 =?=> [cpuregs_wrdata]
	instr_sltiu =?=> [cpuregs_wrdata]
	is_lui_auipc_jal_jalr_addi_add_sub =?=> [cpuregs_wrdata]
	alu_out_q =?=> [cpuregs_wrdata]
	instr_slt =?=> [cpuregs_wrdata]
	alu_add_sub =?=> [cpuregs_wrdata]
	instr_slti =?=> [cpuregs_wrdata]
	reg_op1 =?=> [cpuregs_wrdata]
	instr_ori =?=> [cpuregs_wrdata]
	decoded_rs1 =?=> [cpuregs_wrdata]
	instr_xori =?=> [cpuregs_wrdata]
	instr_xor =?=> [cpuregs_wrdata]
	alu_out =?=> [cpuregs_wrdata]
	is_compare =?=> [cpuregs_wrdata]
	decoded_imm =?=> [cpuregs_wrdata]
	instr_and =?=> [cpuregs_wrdata]
	instr_or =?=> [cpuregs_wrdata]
	reg_op2 =?=> [cpuregs_wrdata]
	instr_sltu =?=> [cpuregs_wrdata]
case: 114_116
	instr_andi =?=> [mem_do_rinst]
	cpuregs_rs1 =?=> [mem_do_rinst]
	instr_sltiu =?=> [mem_do_rinst]
	is_lui_auipc_jal_jalr_addi_add_sub =?=> [mem_do_rinst]
	alu_out_q =?=> [mem_do_rinst]
	instr_slt =?=> [mem_do_rinst]
	alu_add_sub =?=> [mem_do_rinst]
	instr_slti =?=> [mem_do_rinst]
	reg_op1 =?=> [mem_do_rinst]
	instr_ori =?=> [mem_do_rinst]
	cpuregs_write =?=> [mem_do_rinst]
	decoded_rs1 =?=> [mem_do_rinst]
	instr_xori =?=> [mem_do_rinst]
	instr_xor =?=> [mem_do_rinst]
	decoded_rd =?=> [mem_do_rinst]
	latched_rd =?=> [mem_do_rinst]
	alu_out =?=> [mem_do_rinst]
	is_compare =?=> [mem_do_rinst]
	decoded_imm =?=> [mem_do_rinst]
	instr_and =?=> [mem_do_rinst]
	cpuregs_wrdata =?=> [mem_do_rinst]
	instr_or =?=> [mem_do_rinst]
	reg_op2 =?=> [mem_do_rinst]
	instr_sltu =?=> [mem_do_rinst]
case: 117_120_123_127_131_134_138_142_145_149_153_156_160_164_167_171_175_178_182_186_189_193_197_200_204_208_211_215_219_222_226_230_233_237_241_244_248_252_255_259_263_266_270_274_277_281_285_288_292_296_299_303_307_310_314_318_321_325_329_332_336_340_343_347_351_354_358_362_365_369_373_376_380_384_387_391_395_398_402_406_409_413_417_420_424_428_431_435_439_442_446_450_453_457_461_464_468_472_475_479_483_486_490_494_497_501_505_508_512_516_519_523_527_530_534_538_541_545_549_552_556_560_563_567_571_574_578_582_585_589_593_596_600_604_607_611_615_618_622_626_629_633_637_640_644_648_651_655_659_662_666_670_673_677_681_684_688_692_695_699_703_706_710_714_717_721_725_728_732_736_739_743_747_750_754_758_761_765_769_772_776_780_783_787_791_794_798_802_805_809_813_816_820_824_827_831_835_838_842_846_849_853_857_860_864_868_871_875_879_882_886_890_893_897_901_904_908_912_915_919_923_926_930_934_937_941_945_948_952_956_959_963_967_970_974_978_981_985_989_992_996_1000_1003_1007_1011_1014_1018_1022_1025_1029_1033_1036_1040_1044_1047_1051_1055_1058_1062_1066_1069_1073_1077_1080_1084_1088_1091_1095_1099
	instr_andi =?=> [last_mem_valid]
	cpuregs_rs1 =?=> [last_mem_valid]
	instr_sltiu =?=> [last_mem_valid]
	is_lui_auipc_jal_jalr_addi_add_sub =?=> [last_mem_valid]
	alu_out_q =?=> [last_mem_valid]
	instr_slt =?=> [last_mem_valid]
	alu_add_sub =?=> [last_mem_valid]
	instr_slti =?=> [last_mem_valid]
	reg_op1 =?=> [last_mem_valid]
	instr_ori =?=> [last_mem_valid]
	cpuregs_write =?=> [last_mem_valid]
	decoded_rs1 =?=> [last_mem_valid]
	instr_xori =?=> [last_mem_valid]
	instr_xor =?=> [last_mem_valid]
	decoded_rd =?=> [last_mem_valid]
	latched_rd =?=> [last_mem_valid]
	alu_out =?=> [last_mem_valid]
	is_compare =?=> [last_mem_valid]
	decoded_imm =?=> [last_mem_valid]
	instr_and =?=> [last_mem_valid]
	cpuregs_wrdata =?=> [last_mem_valid]
	instr_or =?=> [last_mem_valid]
	reg_op2 =?=> [last_mem_valid]
	instr_sltu =?=> [last_mem_valid]
case: 135
	decoded_imm_j =?=> [reg_pc, mem_addr, q_insn_imm]
case: 138
	decoded_imm_j =?=> [mem_wdata, pcpi_insn, mem_wstrb, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, mem_state, dbg_insn_rs1, dbg_ascii_instr, new_ascii_instr, dbg_insn_opcode, dbg_insn_addr, mem_valid, mem_instr, mem_do_prefetch, mem_do_rinst, instr_lw, decoder_trigger_q, decoder_pseudo_trigger_q, dbg_next, dbg_valid_insn]
case: 137
	decoded_imm_j =?=> [alu_shr, alu_shl, alu_add_sub, count_instr, dbg_rs2val, dbg_rs1val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, mem_do_wdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, alu_eq, alu_ltu, alu_lts, cpuregs_write]
case: 138_143
	decoded_imm_j =?=> [alu_out_q]
case: 137_142
	decoded_imm_j =?=> [alu_out]
case: 136
	decoded_imm_j =?=> [dbg_ascii_state, cpu_state, cpuregs_wrdata]
case: 132
	decoded_imm_j =?=> [cached_insn_imm]
case: 139
	decoded_imm_j =?=> [cached_ascii_instr, q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_la_secondword, is_lbu_lhu_lw, dbg_rs1val_valid]
case: 141
	decoded_imm_j =?=> [cpuregs_rs2, decoded_rs2, decoded_rs1, mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, instr_jalr, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
case: 131
	decoded_imm_j =?=> [decoded_imm]
	mem_rdata_word =?=> [mem_wdata]
	instr_lb =?=> [mem_wdata]
	latched_stalu =?=> [mem_wdata]
	is_lbu_lhu_lw =?=> [mem_wdata]
	latched_is_lb =?=> [mem_wdata]
	instr_lbu =?=> [mem_wdata]
	latched_is_lu =?=> [mem_wdata]
	instr_sub =?=> [mem_wdata]
	instr_lw =?=> [instr_srai, instr_sub, instr_sra]
	latched_is_lh =?=> [mem_wdata]
	instr_lh =?=> [mem_wdata]
	instr_lhu =?=> [mem_wdata]
	reg_out =?=> [mem_wdata]
case: 144
	decoded_imm_j =?=> [decoded_rd]
case: 134_135
	decoded_imm_j =?=> [dbg_insn_imm]
case: 134
	decoded_imm_j =?=> [reg_next_pc]
case: 139_142_145_149_153_156_160_164_167_171_175_178_182_186_189_193_197_200_204_208_211_215_219_222_226_230_233_237_241_244_248_252_255_259_263_266_270_274_277_281_285_288_292_296_299_303_307_310_314_318_321_325_329_332_336_340_343_347_351_354_358_362_365_369_373_376_380_384_387_391_395_398_402_406_409_413_417_420_424_428_431_435_439_442_446_450_453_457_461_464_468_472_475_479_483_486_490_494_497_501_505_508_512_516_519_523_527_530_534_538_541_545_549_552_556_560_563_567_571_574_578_582_585_589_593_596_600_604_607_611_615_618_622_626_629_633_637_640_644_648_651_655_659_662_666_670_673_677_681_684_688_692_695_699_703_706_710_714_717_721_725_728_732_736_739_743_747_750_754_758_761_765_769_772_776_780_783_787_791_794_798_802_805_809_813_816_820_824_827_831_835_838_842_846_849_853_857_860_864_868_871_875_879_882_886_890_893_897_901_904_908_912_915_919_923_926_930_934_937_941_945_948_952_956_959_963_967_970_974_978_981_985_989_992_996_1000_1003_1007_1011_1014_1018_1022_1025_1029_1033_1036_1040_1044_1047_1051_1055_1058_1062_1066_1069_1073_1077_1080_1084_1088_1091_1095_1099
	decoded_imm_j =?=> [last_mem_valid]
case: 142
	decoded_imm_j =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_add, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, alu_out_0]
case: 153
	decoded_imm_j =?=> [instr_srai, instr_sub, instr_sra]
case: 145
	decoded_imm_j =?=> [instr_ecall_ebreak]
case: 143
	decoded_imm_j =?=> [is_slti_blt_slt, is_sltiu_bltu_sltu, set_mem_do_rinst, alu_out_0_q]
case: 101
	cpu_state =?=> [reg_pc, alu_shr, alu_shl, alu_add_sub, alu_out, count_instr, dbg_rs2val, dbg_rs1val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_op1, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rinst, mem_do_rdata, mem_do_wdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs1val_valid, dbg_rs2val_valid, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_branch, latched_compr, latched_is_lu, latched_is_lh, latched_is_lb, alu_eq, alu_ltu, alu_lts, cpuregs_write]
	mem_do_rinst =?=> [mem_addr, mem_wstrb, mem_state, mem_valid, mem_instr]
	mem_do_wdata =?=> [mem_wdata, mem_addr, dbg_ascii_state, cpu_state, mem_wstrb, mem_state, cpuregs_wrdata, mem_valid, mem_instr]
	latched_store =?=> [reg_pc, cpuregs_rs2, cpuregs_rs1, reg_next_pc]
	mem_do_rdata =?=> [mem_addr, dbg_ascii_state, cpu_state, mem_wstrb, mem_state, cpuregs_wrdata, mem_valid, mem_instr]
	decoded_rd =?=> [latched_rd]
	compressed_instr =?=> [latched_compr]
	trap =?=> [mem_wdata, mem_addr, mem_wstrb, mem_instr]
	decoder_trigger =?=> [dbg_ascii_state, cpu_state, count_instr, cpuregs_wrdata, reg_next_pc, mem_do_prefetch, mem_do_rinst, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, dbg_valid_insn, latched_branch, cpuregs_write]
	mem_state =?=> [mem_wstrb, mem_valid, mem_instr, mem_la_secondword]
	do_waitirq =?=> [mem_do_rinst]
	reg_next_pc =?=> [reg_pc]
	latched_branch =?=> [reg_pc, cpuregs_rs2, cpuregs_rs1, reg_next_pc]
	mem_do_prefetch =?=> [mem_addr, mem_wstrb, mem_state, mem_valid, mem_instr]
case: 102
	cpu_state =?=> [mem_wdata, mem_addr, alu_out_q, pcpi_insn, mem_wstrb, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm, mem_state, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, new_ascii_instr, dbg_insn_opcode, dbg_insn_addr, mem_valid, mem_instr, mem_do_prefetch, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_maskirq, instr_timer, decoder_trigger_q, decoder_pseudo_trigger_q, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, dbg_next, dbg_valid_insn]
	mem_do_rinst =?=> [mem_la_secondword]
	reg_pc =?=> [dbg_ascii_state, cpu_state, cpuregs_wrdata]
	mem_do_wdata =?=> [reg_pc, alu_shr, alu_shl, alu_add_sub, alu_out, count_instr, dbg_rs2val, dbg_rs1val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_op1, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rinst, mem_do_rdata, mem_la_secondword, decoder_trigger, decoder_pseudo_trigger, dbg_rs1val_valid, dbg_rs2val_valid, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_branch, latched_compr, latched_is_lu, latched_is_lh, latched_is_lb, alu_eq, alu_ltu, alu_lts, cpuregs_write]
	latched_store =?=> [mem_addr, dbg_ascii_state, cpu_state]
	mem_do_rdata =?=> [reg_pc, alu_shr, alu_shl, alu_add_sub, alu_out, count_instr, dbg_rs2val, dbg_rs1val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_op1, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rinst, mem_do_wdata, mem_la_secondword, decoder_trigger, decoder_pseudo_trigger, dbg_rs1val_valid, dbg_rs2val_valid, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_branch, latched_compr, latched_is_lu, latched_is_lh, latched_is_lb, alu_eq, alu_ltu, alu_lts, cpuregs_write]
	trap =?=> [mem_state, mem_valid]
	decoder_trigger =?=> [reg_pc, mem_addr, alu_shl, mem_wstrb, mem_rdata_word, mem_wordsize, mem_state, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_valid, mem_instr, mem_do_rdata, mem_do_wdata, decoder_pseudo_trigger, is_slti_blt_slt, is_sltiu_bltu_sltu, is_compare, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_compr, latched_is_lu, latched_is_lh, latched_is_lb, alu_out_0, alu_eq, alu_ltu, alu_lts]
	mem_state =?=> [mem_addr, cpuregs_rs2, cpuregs_rs1, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, new_ascii_instr, mem_do_rinst, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_retirq, instr_waitirq, decoder_trigger, compressed_instr, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
	do_waitirq =?=> [mem_addr, mem_wstrb, mem_state, mem_valid, mem_instr]
	reg_next_pc =?=> [mem_addr, dbg_ascii_state, cpu_state, cpuregs_wrdata]
	latched_branch =?=> [mem_addr, dbg_ascii_state, cpu_state]
	mem_do_prefetch =?=> [mem_la_secondword]
case: 103
	cpu_state =?=> [cached_insn_imm, cached_ascii_instr, q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_la_secondword, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_retirq, instr_waitirq, compressed_instr, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_slti_blt_slt, is_sltiu_bltu_sltu, is_beq_bne_blt_bge_bltu_bgeu, is_lbu_lhu_lw, is_alu_reg_imm, is_alu_reg_reg, is_compare, alu_out_0]
	mem_do_rinst =?=> [cpuregs_rs2, cpuregs_rs1, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, new_ascii_instr, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_retirq, instr_waitirq, decoder_trigger, compressed_instr, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
	reg_pc =?=> [alu_shr, alu_shl, alu_add_sub, alu_out, count_instr, dbg_rs2val, dbg_rs1val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_op1, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rinst, mem_do_rdata, mem_do_wdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs1val_valid, dbg_rs2val_valid, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_branch, latched_compr, latched_is_lu, latched_is_lh, latched_is_lb, alu_eq, alu_ltu, alu_lts, cpuregs_write]
	mem_do_wdata =?=> [alu_out_q, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_imm, decoded_rs2, decoded_rs1, decoded_rd, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, new_ascii_instr, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_retirq, instr_maskirq, instr_waitirq, instr_timer, decoder_trigger_q, decoder_pseudo_trigger_q, compressed_instr, is_lb_lh_lw_lbu_lhu, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sb_sh_sw, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_next, dbg_valid_insn]
	latched_store =?=> [alu_shr, alu_shl, alu_add_sub, alu_out, count_instr, dbg_rs2val, dbg_rs1val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rinst, mem_do_rdata, mem_do_wdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs1val_valid, dbg_rs2val_valid, set_mem_do_rdata, set_mem_do_wdata, latched_stalu, latched_branch, latched_compr, latched_is_lu, latched_is_lh, latched_is_lb, alu_eq, alu_ltu, alu_lts]
	mem_do_rdata =?=> [mem_wdata, alu_out_q, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_imm, decoded_rs2, decoded_rs1, decoded_rd, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, new_ascii_instr, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_retirq, instr_maskirq, instr_waitirq, instr_timer, decoder_trigger_q, decoder_pseudo_trigger_q, compressed_instr, is_lb_lh_lw_lbu_lhu, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sb_sh_sw, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg, dbg_next, dbg_valid_insn]
	trap =?=> [mem_la_secondword]
	decoder_trigger =?=> [mem_wdata, cpuregs_rs2, cpuregs_rs1, mem_la_secondword, decoder_pseudo_trigger_q, alu_out_0_q]
	mem_state =?=> [alu_out, dbg_ascii_state, cpu_state, pcpi_insn, count_instr, dbg_rs2val, dbg_rs1val, dbg_insn_rd, dbg_insn_rs2, decoded_imm, cpuregs_wrdata, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, reg_next_pc, latched_rd, mem_do_prefetch, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_maskirq, instr_timer, decoder_trigger_q, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, dbg_rs1val_valid, dbg_next, dbg_valid_insn, latched_branch, latched_compr, alu_out_0, cpuregs_write]
	do_waitirq =?=> [mem_la_secondword]
	reg_next_pc =?=> [alu_shr, alu_shl, alu_add_sub, alu_out, count_instr, dbg_rs2val, dbg_rs1val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rinst, mem_do_rdata, mem_do_wdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs1val_valid, dbg_rs2val_valid, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_branch, latched_compr, latched_is_lu, latched_is_lh, latched_is_lb, alu_eq, alu_ltu, alu_lts, cpuregs_write]
	latched_branch =?=> [alu_shr, alu_shl, alu_add_sub, alu_out, count_instr, dbg_rs2val, dbg_rs1val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rinst, mem_do_rdata, mem_do_wdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs1val_valid, dbg_rs2val_valid, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_compr, latched_is_lu, latched_is_lh, latched_is_lb, alu_eq, alu_ltu, alu_lts]
	mem_do_prefetch =?=> [cpuregs_rs2, cpuregs_rs1, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, new_ascii_instr, mem_do_rinst, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_retirq, instr_waitirq, decoder_trigger, compressed_instr, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
case: 104
	cpu_state =?=> [mem_rdata_q, next_insn_opcode, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, is_lui_auipc_jal, set_mem_do_rinst, alu_out_0_q]
	mem_do_rinst =?=> [alu_out, dbg_ascii_state, cpu_state, pcpi_insn, count_instr, dbg_rs2val, dbg_rs1val, dbg_insn_rd, dbg_insn_rs2, decoded_imm, mem_rdata_q, cpuregs_wrdata, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, dbg_insn_opcode, next_insn_opcode, dbg_insn_addr, reg_next_pc, latched_rd, mem_do_prefetch, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_maskirq, instr_timer, decoder_trigger_q, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, dbg_rs1val_valid, dbg_next, dbg_valid_insn, latched_branch, latched_compr, alu_out_0, cpuregs_write]
	reg_pc =?=> [mem_wdata, alu_out_q, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_imm, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, new_ascii_instr, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_retirq, instr_maskirq, instr_waitirq, instr_timer, decoder_trigger_q, decoder_pseudo_trigger_q, compressed_instr, is_lb_lh_lw_lbu_lhu, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sb_sh_sw, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_alu_reg_imm, is_alu_reg_reg, dbg_next, dbg_valid_insn]
	mem_do_wdata =?=> [cached_insn_imm, cached_ascii_instr, q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, mem_rdata_q, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, next_insn_opcode, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, is_lui_auipc_jal, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, is_compare, alu_out_0]
	latched_store =?=> [mem_wdata, alu_out_q, pcpi_insn, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_imm, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, new_ascii_instr, dbg_insn_opcode, mem_do_prefetch, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_retirq, instr_maskirq, instr_waitirq, instr_timer, decoder_trigger_q, decoder_pseudo_trigger_q, compressed_instr, is_lb_lh_lw_lbu_lhu, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sb_sh_sw, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_alu_reg_imm, is_alu_reg_reg, dbg_next, dbg_valid_insn]
	mem_do_rdata =?=> [cached_insn_imm, cached_ascii_instr, q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, mem_rdata_q, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, next_insn_opcode, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, is_lui_auipc_jal, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, is_compare, alu_out_0]
	trap =?=> [cpuregs_rs2, cpuregs_rs1, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_rdata_q, new_ascii_instr, next_insn_opcode, mem_do_rinst, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_retirq, instr_waitirq, decoder_trigger, compressed_instr, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
	mem_valid =?=> [cpuregs_rs2, cpuregs_rs1, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_state, new_ascii_instr, mem_do_rinst, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_retirq, instr_waitirq, compressed_instr, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
	decoder_trigger =?=> [decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_retirq, instr_waitirq, compressed_instr, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
	mem_state =?=> [reg_pc, alu_shr, alu_shl, alu_add_sub, alu_out_q, cached_insn_imm, cached_ascii_instr, q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, mem_rdata_q, mem_rdata_word, mem_wordsize, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, next_insn_opcode, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, trap, mem_do_rdata, mem_do_wdata, decoder_pseudo_trigger, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, dbg_rs2val_valid, set_mem_do_rinst, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_is_lu, latched_is_lh, latched_is_lb, alu_out_0_q, alu_eq, alu_ltu, alu_lts]
	do_waitirq =?=> [cpuregs_rs2, cpuregs_rs1, decoded_imm_j, decoded_rs2, decoded_rs1, decoded_rd, mem_rdata_q, new_ascii_instr, next_insn_opcode, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_retirq, instr_waitirq, decoder_trigger, compressed_instr, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_imm, is_alu_reg_reg]
	reg_next_pc =?=> [mem_wdata, alu_out_q, pcpi_insn, cpuregs_rs2, cpuregs_rs1, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_imm, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, new_ascii_instr, dbg_insn_opcode, mem_do_prefetch, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_retirq, instr_maskirq, instr_waitirq, instr_timer, decoder_trigger_q, decoder_pseudo_trigger_q, compressed_instr, is_lb_lh_lw_lbu_lhu, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sb_sh_sw, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_alu_reg_imm, is_alu_reg_reg, dbg_next, dbg_valid_insn]
	latched_branch =?=> [mem_wdata, alu_out_q, pcpi_insn, dbg_insn_rd, dbg_insn_rs2, decoded_imm_j, decoded_imm, decoded_rs2, decoded_rs1, decoded_rd, mem_state, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, new_ascii_instr, dbg_insn_opcode, mem_do_prefetch, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_retirq, instr_maskirq, instr_waitirq, instr_timer, decoder_trigger_q, decoder_pseudo_trigger_q, compressed_instr, is_lb_lh_lw_lbu_lhu, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sb_sh_sw, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_alu_reg_imm, is_alu_reg_reg, dbg_next, dbg_valid_insn]
	mem_do_prefetch =?=> [alu_out, dbg_ascii_state, cpu_state, pcpi_insn, count_instr, dbg_rs2val, dbg_rs1val, dbg_insn_rd, dbg_insn_rs2, decoded_imm, mem_rdata_q, cpuregs_wrdata, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, dbg_insn_opcode, next_insn_opcode, dbg_insn_addr, reg_next_pc, latched_rd, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_maskirq, instr_timer, decoder_trigger_q, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, dbg_rs1val_valid, dbg_next, dbg_valid_insn, latched_branch, latched_compr, alu_out_0, cpuregs_write]
case: 103_105_109_113_116_120_123_127_131_134_138_142_145_149_153_156_160_164_167_171_175_178_182_186_189_193_197_200_204_208_211_215_219_222_226_230_233_237_241_244_248_252_255_259_263_266_270_274_277_281_285_288_292_296_299_303_307_310_314_318_321_325_329_332_336_340_343_347_351_354_358_362_365_369_373_376_380_384_387_391_395_398_402_406_409_413_417_420_424_428_431_435_439_442_446_450_453_457_461_464_468_472_475_479_483_486_490_494_497_501_505_508_512_516_519_523_527_530_534_538_541_545_549_552_556_560_563_567_571_574_578_582_585_589_593_596_600_604_607_611_615_618_622_626_629_633_637_640_644_648_651_655_659_662_666_670_673_677_681_684_688_692_695_699_703_706_710_714_717_721_725_728_732_736_739_743_747_750_754_758_761_765_769_772_776_780_783_787_791_794_798_802_805_809_813_816_820_824_827_831_835_838_842_846_849_853_857_860_864_868_871_875_879_882_886_890_893_897_901_904_908_912_915_919_923_926_930_934_937_941_945_948_952_956_959_963_967_970_974_978_981_985_989_992_996_1000_1003_1007_1011_1014_1018_1022_1025_1029_1033_1036_1040_1044_1047_1051_1055_1058_1062_1066_1069_1073_1077_1080_1084_1088_1091_1095_1099
	cpu_state =?=> [last_mem_valid]
	trap =?=> [last_mem_valid]
	decoder_trigger =?=> [last_mem_valid]
	do_waitirq =?=> [last_mem_valid]
case: 105
	irq_active =?=> [irq_delay]
	instr_lui =?=> [decoded_imm]
	mem_do_rinst =?=> [reg_pc, alu_shr, alu_shl, alu_add_sub, alu_out_q, cached_insn_imm, cached_ascii_instr, q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, mem_rdata_word, mem_wordsize, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, trap, mem_do_rdata, mem_do_wdata, decoder_pseudo_trigger, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, dbg_rs2val_valid, set_mem_do_rinst, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_is_lu, latched_is_lh, latched_is_lb, alu_out_0_q, alu_eq, alu_ltu, alu_lts]
	reg_pc =?=> [mem_addr, cached_insn_imm, cached_ascii_instr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, is_lui_auipc_jal, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, is_compare, alu_out_0]
	mem_do_wdata =?=> [set_mem_do_rinst, alu_out_0_q]
	latched_store =?=> [cached_insn_imm, cached_ascii_instr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, is_lui_auipc_jal, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, is_compare, alu_out_0]
	decoder_pseudo_trigger =?=> [instr_addi]
	instr_jal =?=> [dbg_ascii_state, cpu_state, decoded_imm, cpuregs_wrdata, reg_next_pc, mem_do_prefetch, mem_do_rinst, latched_branch, cpuregs_write]
	mem_rdata_q =?=> [alu_out, decoded_imm, new_ascii_instr, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi]
	mem_do_rdata =?=> [set_mem_do_rinst, alu_out_0_q]
	instr_auipc =?=> [decoded_imm]
	instr_jalr =?=> [mem_do_prefetch]
	compressed_instr =?=> [reg_next_pc]
	is_sb_sh_sw =?=> [decoded_imm]
	instr_retirq =?=> [mem_do_prefetch]
	trap =?=> [alu_out, dbg_ascii_state, cpu_state, pcpi_insn, count_instr, dbg_rs2val, dbg_rs1val, dbg_insn_rd, dbg_insn_rs2, decoded_imm, cpuregs_wrdata, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, reg_next_pc, latched_rd, mem_do_prefetch, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_maskirq, instr_timer, decoder_trigger_q, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, dbg_rs1val_valid, dbg_next, dbg_valid_insn, latched_branch, latched_compr, alu_out_0, cpuregs_write]
	mem_valid =?=> [alu_out, dbg_ascii_state, cpu_state, pcpi_insn, mem_wstrb, count_instr, dbg_rs2val, dbg_rs1val, dbg_insn_rd, dbg_insn_rs2, decoded_imm, cpuregs_wrdata, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, dbg_insn_addr, reg_next_pc, latched_rd, mem_instr, mem_do_prefetch, mem_la_secondword, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_maskirq, instr_timer, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, dbg_rs1val_valid, dbg_valid_insn, latched_branch, latched_compr, alu_out_0, cpuregs_write]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [decoded_imm, instr_beq, alu_out_0]
	decoder_trigger =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, is_lui_auipc_jal, set_mem_do_rinst]
	mem_state =?=> [mem_wdata, decoder_pseudo_trigger_q]
	is_alu_reg_imm =?=> [decoded_imm, instr_addi]
	do_waitirq =?=> [alu_out, dbg_ascii_state, cpu_state, pcpi_insn, count_instr, dbg_rs2val, dbg_rs1val, dbg_insn_rd, dbg_insn_rs2, decoded_imm, cpuregs_wrdata, dbg_insn_rs1, dbg_insn_imm, dbg_ascii_instr, dbg_insn_opcode, dbg_insn_addr, reg_next_pc, latched_rd, mem_do_prefetch, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_getq, instr_setq, instr_maskirq, instr_timer, decoder_trigger_q, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, dbg_rs1val_valid, dbg_next, dbg_valid_insn, latched_branch, latched_compr, alu_out_0, cpuregs_write]
	reg_next_pc =?=> [cached_insn_imm, cached_ascii_instr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, is_lui_auipc_jal, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, is_compare, alu_out_0]
	latched_branch =?=> [cached_insn_imm, cached_ascii_instr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, is_lui_auipc_jal, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, is_compare, alu_out_0]
	mem_do_prefetch =?=> [reg_pc, alu_shr, alu_shl, alu_add_sub, alu_out_q, cached_insn_imm, cached_ascii_instr, q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, mem_rdata_word, mem_wordsize, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, trap, mem_do_rdata, mem_do_wdata, decoder_pseudo_trigger, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, dbg_rs2val_valid, set_mem_do_rinst, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_is_lu, latched_is_lh, latched_is_lb, alu_out_0_q, alu_eq, alu_ltu, alu_lts]
case: 0_132_154_176_198_220_242_264_286_308_330_352_374_396_418_440_462_484_506_528_550_572_594_616_638_660_682_704_726_748_770_792_814_836_858_880_902_924_946_968_990_1012_1034_1056_1078
	instr_bltu =?=> [cached_ascii_instr]
	instr_bne =?=> [cached_ascii_instr]
	instr_lb =?=> [cached_ascii_instr]
	instr_beq =?=> [cached_ascii_instr]
	instr_bge =?=> [cached_ascii_instr]
	instr_bgeu =?=> [cached_ascii_instr]
	instr_blt =?=> [cached_ascii_instr]
	instr_lh =?=> [cached_ascii_instr]
case: 0_106_109_127_134_135_139_149_156_157_161_171_178_179_183_193_200_201_205_215_222_223_227_237_244_245_249_259_266_267_271_281_288_289_293_303_310_311_315_325_332_333_337_347_354_355_359_369_376_377_381_391_398_399_403_413_420_421_425_435_442_443_447_457_464_465_469_479_486_487_491_501_508_509_513_523_530_531_535_545_552_553_557_567_574_575_579_589_596_597_601_611_618_619_623_633_640_641_645_655_662_663_667_677_684_685_689_699_706_707_711_721_728_729_733_743_750_751_755_765_772_773_777_787_794_795_799_809_816_817_821_831_838_839_843_853_860_861_865_875_882_883_887_897_904_905_909_919_926_927_931_941_948_949_953_963_970_971_975_985_992_993_997_1007_1014_1015_1019_1029_1036_1037_1041_1051_1058_1059_1063_1073_1080_1081_1085_1095
	instr_bltu =?=> [dbg_ascii_instr]
	instr_bne =?=> [dbg_ascii_instr]
	instr_lb =?=> [dbg_ascii_instr]
	instr_beq =?=> [dbg_ascii_instr]
	instr_bge =?=> [dbg_ascii_instr]
	instr_bgeu =?=> [dbg_ascii_instr]
	instr_blt =?=> [dbg_ascii_instr]
	instr_lh =?=> [dbg_ascii_instr]
case: 0_109_113_127_131_149_153_171_175_193_197_215_219_237_241_259_263_281_285_303_307_325_329_347_351_369_373_391_395_413_417_435_439_457_461_479_483_501_505_523_527_545_549_567_571_589_593_611_615_633_637_655_659_677_681_699_703_721_725_743_747_765_769_787_791_809_813_831_835_853_857_875_879_897_901_919_923_941_945_963_967_985_989_1007_1011_1029_1033_1051_1055_1073_1077_1095_1099
	instr_bltu =?=> [new_ascii_instr]
	instr_sb =?=> [new_ascii_instr]
	instr_bne =?=> [new_ascii_instr]
	instr_lb =?=> [new_ascii_instr]
	instr_beq =?=> [new_ascii_instr]
	instr_bge =?=> [new_ascii_instr]
	instr_bgeu =?=> [new_ascii_instr]
	instr_lbu =?=> [new_ascii_instr]
	instr_blt =?=> [new_ascii_instr]
	instr_lh =?=> [new_ascii_instr]
	instr_lhu =?=> [new_ascii_instr]
	instr_sh =?=> [new_ascii_instr]
case: 0_135_157_179_201_223_245_267_289_311_333_355_377_399_421_443_465_487_509_531_553_575_597_619_641_663_685_707_729_751_773_795_817_839_861_883_905_927_949_971_993_1015_1037_1059_1081
	instr_bltu =?=> [q_ascii_instr]
	instr_bne =?=> [q_ascii_instr]
	instr_lb =?=> [q_ascii_instr]
	instr_beq =?=> [q_ascii_instr]
	instr_bge =?=> [q_ascii_instr]
	instr_bgeu =?=> [q_ascii_instr]
	instr_blt =?=> [q_ascii_instr]
	instr_lh =?=> [q_ascii_instr]
case: 106
	cpuregs_rs1 =?=> [alu_shr, alu_shl, alu_add_sub, reg_op1, alu_eq, alu_ltu, alu_lts]
	instr_lui =?=> [alu_shr, alu_shl, alu_add_sub, dbg_ascii_state, cpu_state, cached_insn_imm, q_insn_imm, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, dbg_rs1val_valid, alu_eq, alu_ltu, alu_lts]
	mem_do_rinst =?=> [mem_wdata, decoder_pseudo_trigger_q]
	reg_pc =?=> [alu_out_0_q]
	latched_store =?=> [alu_out_0_q]
	decoder_pseudo_trigger =?=> [alu_shl, alu_add_sub, dbg_ascii_state, cpu_state, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, mem_do_rinst, dbg_rs1val_valid, latched_store, alu_eq, alu_ltu, alu_lts, cpuregs_write]
	instr_rdcycleh =?=> [alu_shr, alu_shl, alu_add_sub, alu_out, dbg_ascii_state, cpu_state, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, mem_do_rinst, dbg_rs1val_valid, latched_store, alu_eq, alu_ltu, alu_lts, cpuregs_write]
	instr_rdcycle =?=> [alu_shr, alu_shl, alu_add_sub, alu_out, dbg_ascii_state, cpu_state, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, mem_do_rinst, dbg_rs1val_valid, latched_store, alu_eq, alu_ltu, alu_lts, cpuregs_write]
	instr_jal =?=> [reg_pc, mem_addr, alu_shr, alu_shl, alu_add_sub, cached_insn_imm, count_instr, q_insn_imm, dbg_rs2val, dbg_rs1val, mem_rdata_word, mem_wordsize, mem_state, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_valid, mem_instr, mem_do_rdata, mem_do_wdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs1val_valid, dbg_rs2val_valid, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_is_lu, latched_is_lh, latched_is_lb, alu_eq, alu_ltu, alu_lts]
	mem_rdata_q =?=> [alu_shr, alu_shl, alu_add_sub, alu_out_q, dbg_ascii_state, cpu_state, cached_insn_imm, cached_ascii_instr, q_insn_imm, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, q_ascii_instr, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, mem_do_rinst, is_lui_auipc_jal_jalr_addi_add_sub, is_slti_blt_slt, is_sltiu_bltu_sltu, is_compare, dbg_rs1val_valid, latched_store, alu_out_0, alu_eq, alu_ltu, alu_lts, cpuregs_write]
	decoded_rs1 =?=> [alu_shr, alu_shl, alu_add_sub, reg_op1, alu_eq, alu_ltu, alu_lts]
	is_lui_auipc_jal =?=> [alu_shr, alu_shl, alu_add_sub, alu_out, dbg_ascii_state, cpu_state, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, dbg_rs1val_valid, alu_eq, alu_ltu, alu_lts]
	instr_auipc =?=> [alu_shr, alu_shl, alu_add_sub, dbg_ascii_state, cpu_state, cached_insn_imm, q_insn_imm, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, dbg_rs1val_valid, alu_eq, alu_ltu, alu_lts]
	is_jalr_addi_slti_sltiu_xori_ori_andi =?=> [alu_shr, alu_shl, alu_add_sub, alu_out, dbg_ascii_state, cpu_state, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, mem_do_rinst, alu_eq, alu_ltu, alu_lts]
	instr_addi =?=> [alu_shr, alu_shl, alu_add_sub, dbg_ascii_state, cpu_state, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, mem_do_rinst, dbg_rs1val_valid, alu_eq, alu_ltu, alu_lts]
	instr_jalr =?=> [mem_addr, mem_state, mem_valid, mem_instr, mem_do_rinst]
	compressed_instr =?=> [mem_addr]
	is_sb_sh_sw =?=> [alu_add_sub, cached_insn_imm, q_insn_imm, reg_op2, mem_la_wdata, alu_eq, alu_ltu, alu_lts]
	decoded_imm =?=> [alu_add_sub, alu_eq, alu_ltu, alu_lts]
	instr_rdinstr =?=> [alu_shr, alu_shl, alu_add_sub, alu_out, dbg_ascii_state, cpu_state, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, mem_do_rinst, dbg_rs1val_valid, latched_store, alu_eq, alu_ltu, alu_lts, cpuregs_write]
	instr_retirq =?=> [mem_addr, mem_state, mem_valid, mem_instr, mem_do_rinst]
	trap =?=> [reg_pc, alu_shr, alu_shl, alu_add_sub, alu_out_q, cached_insn_imm, cached_ascii_instr, q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, mem_rdata_word, mem_wordsize, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, mem_do_rdata, mem_do_wdata, decoder_pseudo_trigger, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, dbg_rs2val_valid, set_mem_do_rinst, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_is_lu, latched_is_lh, latched_is_lb, alu_out_0_q, alu_eq, alu_ltu, alu_lts]
	is_slli_srli_srai =?=> [alu_shr, alu_shl, alu_add_sub, alu_out, dbg_ascii_state, cpu_state, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, mem_do_rinst, alu_eq, alu_ltu, alu_lts]
	mem_valid =?=> [reg_pc, mem_addr, alu_shr, alu_shl, alu_add_sub, alu_out_q, cached_insn_imm, cached_ascii_instr, q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, q_insn_imm, mem_rdata_word, mem_wordsize, q_ascii_instr, q_insn_rs2, q_insn_rs1, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, trap, mem_do_rdata, mem_do_wdata, decoder_pseudo_trigger, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, dbg_rs2val_valid, set_mem_do_rinst, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_is_lu, latched_is_lh, latched_is_lb, alu_out_0_q, alu_eq, alu_ltu, alu_lts]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [alu_add_sub, cached_insn_imm, q_insn_imm, reg_op2, mem_la_wdata, alu_out_0_q, alu_eq, alu_ltu, alu_lts]
	is_lb_lh_lw_lbu_lhu =?=> [alu_shr, alu_shl, alu_add_sub, alu_out, dbg_ascii_state, cpu_state, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, mem_do_rinst, alu_eq, alu_ltu, alu_lts]
	is_alu_reg_imm =?=> [alu_shl, alu_add_sub, alu_out, dbg_ascii_state, cpu_state, cached_insn_imm, q_insn_imm, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, mem_do_rinst, is_lui_auipc_jal_jalr_addi_add_sub, dbg_rs1val_valid, alu_eq, alu_ltu, alu_lts]
	do_waitirq =?=> [reg_pc, alu_shr, alu_shl, alu_add_sub, alu_out_q, cached_insn_imm, cached_ascii_instr, q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_imm, mem_rdata_word, mem_wordsize, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, trap, mem_do_rdata, mem_do_wdata, decoder_pseudo_trigger, is_slti_blt_slt, is_sltiu_bltu_sltu, is_lbu_lhu_lw, dbg_rs2val_valid, set_mem_do_rinst, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_is_lu, latched_is_lh, latched_is_lb, alu_out_0_q, alu_eq, alu_ltu, alu_lts]
	instr_rdinstrh =?=> [alu_shr, alu_shl, alu_add_sub, alu_out, dbg_ascii_state, cpu_state, dbg_rs2val, dbg_rs1val, cpuregs_wrdata, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wdata, mem_do_rinst, dbg_rs1val_valid, latched_store, alu_eq, alu_ltu, alu_lts, cpuregs_write]
	reg_next_pc =?=> [alu_out_0_q]
	latched_branch =?=> [alu_out_0_q]
	mem_do_prefetch =?=> [mem_wdata, decoder_pseudo_trigger_q]
case: 107_117
	cpuregs_rs1 =?=> [alu_out_q]
	decoded_rs1 =?=> [alu_out_q]
	is_sb_sh_sw =?=> [alu_out_q]
	decoded_imm =?=> [alu_out_q]
case: 106_116
	cpuregs_rs1 =?=> [alu_out]
	decoded_rs1 =?=> [alu_out]
	is_sb_sh_sw =?=> [alu_out]
	decoded_imm =?=> [alu_out]
case: 106_110
	cpuregs_rs1 =?=> [dbg_rs1val]
	decoded_rs1 =?=> [dbg_rs1val]
case: 0_116_134_145_156_167_178_189_200_211_222_233_244_255_266_277_288_299_310_321_332_343_354_365_376_387_398_409_420_431_442_453_464_475_486_497_508_519_530_541_552_563_574_585_596_607_618_629_640_651_662_673_684_695_706_717_728_739_750_761_772_783_794_805_816_827_838_849_860_871_882_893_904_915_926_937_948_959_970_981_992_1003_1014_1025_1036_1047_1058_1069_1080_1091
	cached_insn_rs1 =?=> [dbg_insn_rs1]
	decoder_trigger_q =?=> [dbg_insn_rd, dbg_insn_rs2, dbg_insn_rs1]
	cached_insn_rd =?=> [dbg_insn_rd]
	cached_insn_rs2 =?=> [dbg_insn_rs2]
case: 0_117_135_146_157_168_179_190_201_212_223_234_245_256_267_278_289_300_311_322_333_344_355_366_377_388_399_410_421_432_443_454_465_476_487_498_509_520_531_542_553_564_575_586_597_608_619_630_641_652_663_674_685_696_707_718_729_740_751_762_773_784_795_806_817_828_839_850_861_872_883_894_905_916_927_938_949_960_971_982_993_1004_1015_1026_1037_1048_1059_1070_1081_1092
	cached_insn_rs1 =?=> [q_insn_rs1]
	cached_ascii_instr =?=> [q_ascii_instr]
	cached_insn_rd =?=> [q_insn_rd]
	cached_insn_rs2 =?=> [q_insn_rs2]
	cached_insn_imm =?=> [q_insn_imm]
	cached_insn_opcode =?=> [q_insn_opcode]
case: 1_107_111_115
	instr_sltiu =?=> [alu_out_q]
	instr_slt =?=> [alu_out_q]
	instr_slti =?=> [alu_out_q]
	instr_sltu =?=> [alu_out_q]
case: 0_106_110_114
	instr_sltiu =?=> [alu_out]
	instr_slt =?=> [alu_out]
	instr_slti =?=> [alu_out]
	instr_sltu =?=> [alu_out]
case: 101_106_110_114
	instr_sltiu =?=> [is_compare]
	instr_slt =?=> [is_compare]
	instr_slti =?=> [is_compare]
	instr_sltu =?=> [is_compare]
case: 0_106_110_117_124_128_135_139_146_150_157_161_168_172_179_183_190_194_201_205_212_216_223_227_234_238_245_249_256_260_267_271_278_282_289_293_300_304_311_315_322_326_333_337_344_348_355_359_366_370_377_381_388_392_399_403_410_414_421_425_432_436_443_447_454_458_465_469_476_480_487_491_498_502_509_513_520_524_531_535_542_546_553_557_564_568_575_579_586_590_597_601_608_612_619_623_630_634_641_645_652_656_663_667_674_678_685_689_696_700_707_711_718_722_729_733_740_744_751_755_762_766_773_777_784_788_795_799_806_810_817_821_828_832_839_843_850_854_861_865_872_876_883_887_894_898_905_909_916_920_927_931_938_942_949_953_960_964_971_975_982_986_993_997_1004_1008_1015_1019_1026_1030_1037_1041_1048_1052_1059_1063_1070_1074_1081_1085_1092_1096
	q_insn_rs1 =?=> [dbg_insn_rs1]
	q_insn_opcode =?=> [dbg_insn_opcode]
	q_insn_imm =?=> [dbg_insn_imm]
	q_insn_rs2 =?=> [dbg_insn_rs2]
	q_ascii_instr =?=> [dbg_ascii_instr]
	q_insn_rd =?=> [dbg_insn_rd]
case: 107
	instr_lui =?=> [reg_pc, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, mem_do_rinst, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	decoder_pseudo_trigger =?=> [reg_pc, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, decoder_trigger, dbg_rs2val_valid, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb]
	instr_rdcycleh =?=> [reg_pc, alu_out_q, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb]
	instr_rdcycle =?=> [reg_pc, alu_out_q, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb]
	instr_jal =?=> [mem_wdata, pcpi_insn, mem_wstrb, cpuregs_rs2, dbg_insn_addr, mem_la_secondword, decoder_trigger_q, decoder_pseudo_trigger_q, dbg_next, dbg_valid_insn]
	mem_rdata_q =?=> [reg_pc, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, alu_out_0_q]
	is_lui_auipc_jal =?=> [reg_pc, alu_out_q, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, mem_do_rinst, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_auipc =?=> [reg_pc, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, mem_do_rinst, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	is_jalr_addi_slti_sltiu_xori_ori_andi =?=> [reg_pc, alu_out_q, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_addi =?=> [reg_pc, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_jalr =?=> [mem_wstrb, mem_la_secondword]
	instr_rdinstr =?=> [reg_pc, alu_out_q, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb]
	instr_retirq =?=> [mem_wstrb, mem_la_secondword]
	trap =?=> [decoder_pseudo_trigger_q]
	is_slli_srli_srai =?=> [reg_pc, alu_out_q, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	mem_valid =?=> [mem_wdata, decoder_pseudo_trigger_q]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [dbg_ascii_state, cpu_state, cpuregs_wrdata, reg_out, latched_rd, set_mem_do_rinst, latched_store, latched_stalu, latched_branch, cpuregs_write]
	is_lb_lh_lw_lbu_lhu =?=> [reg_pc, alu_out_q, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	is_alu_reg_imm =?=> [reg_pc, alu_out_q, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	do_waitirq =?=> [mem_wdata, decoder_pseudo_trigger_q]
	instr_rdinstrh =?=> [reg_pc, alu_out_q, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb]
case: 109
	instr_lui =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, instr_sw, instr_addi, instr_slti, is_jalr_addi_slti_sltiu_xori_ori_andi]
	reg_pc =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, set_mem_do_rinst]
	latched_store =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, set_mem_do_rinst]
	decoder_pseudo_trigger =?=> [mem_addr, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, mem_valid, mem_instr, mem_la_secondword, instr_slti]
	instr_rdcycleh =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, instr_sw, instr_addi, instr_slti, is_jalr_addi_slti_sltiu_xori_ori_andi]
	instr_rdcycle =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, instr_sw, instr_addi, instr_slti, is_jalr_addi_slti_sltiu_xori_ori_andi]
	instr_jal =?=> [q_insn_rd, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_rs2, q_insn_opcode, q_insn_rs1, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_compare, alu_out_0]
	mem_rdata_q =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, instr_lui, instr_auipc, instr_jal, instr_jalr, instr_sb, instr_sh, instr_sw, is_lb_lh_lw_lbu_lhu, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
	is_lui_auipc_jal =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, dbg_ascii_instr, new_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, instr_sw, instr_addi, instr_slti, is_jalr_addi_slti_sltiu_xori_ori_andi]
	instr_auipc =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, instr_sw, instr_addi, instr_slti, is_jalr_addi_slti_sltiu_xori_ori_andi]
	is_jalr_addi_slti_sltiu_xori_ori_andi =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, dbg_ascii_instr, new_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, instr_sw, instr_addi, instr_slti]
	instr_addi =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, instr_sw, instr_slti, is_jalr_addi_slti_sltiu_xori_ori_andi]
	instr_jalr =?=> [dbg_ascii_state, cpu_state, pcpi_insn, count_instr, dbg_rs2val, dbg_rs1val, dbg_insn_rd, dbg_insn_rs2, decoded_imm, dbg_insn_rs1, dbg_insn_imm, dbg_insn_opcode, dbg_insn_addr, latched_rd, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, decoder_trigger_q, is_lui_auipc_jal, is_slli_srli_srai, is_sll_srl_sra, is_compare, dbg_rs1val_valid, dbg_next, alu_out_0]
	compressed_instr =?=> [dbg_insn_addr]
	instr_rdinstr =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, instr_sw, instr_addi, instr_slti, is_jalr_addi_slti_sltiu_xori_ori_andi]
	instr_retirq =?=> [alu_out, dbg_ascii_state, cpu_state, pcpi_insn, count_instr, dbg_rs2val, dbg_rs1val, dbg_insn_rd, dbg_insn_rs2, decoded_imm, cpuregs_wrdata, dbg_insn_rs1, dbg_insn_imm, dbg_insn_opcode, dbg_insn_addr, reg_next_pc, latched_rd, instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw, instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai, instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and, instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, decoder_trigger_q, is_lui_auipc_jal, is_slli_srli_srai, is_jalr_addi_slti_sltiu_xori_ori_andi, is_sll_srl_sra, is_lui_auipc_jal_jalr_addi_add_sub, is_compare, dbg_rs1val_valid, dbg_next, latched_branch, alu_out_0, cpuregs_write]
	is_slli_srli_srai =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, dbg_ascii_instr, new_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, instr_sw, instr_addi, instr_slti, is_jalr_addi_slti_sltiu_xori_ori_andi]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [mem_wdata, mem_addr, pcpi_insn, mem_wstrb, dbg_insn_rd, dbg_insn_rs2, mem_state, dbg_insn_rs1, dbg_ascii_instr, new_ascii_instr, dbg_insn_opcode, dbg_insn_addr, mem_valid, mem_instr, mem_do_prefetch, instr_sw, instr_addi, decoder_trigger_q, decoder_pseudo_trigger_q, is_jalr_addi_slti_sltiu_xori_ori_andi, is_lui_auipc_jal_jalr_addi_add_sub, dbg_rs1val_valid, dbg_next, dbg_valid_insn]
	is_lb_lh_lw_lbu_lhu =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, instr_sw, instr_addi, instr_slti, is_jalr_addi_slti_sltiu_xori_ori_andi]
	is_alu_reg_imm =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, instr_sw, instr_slti]
	instr_rdinstrh =?=> [mem_addr, q_insn_rd, mem_wstrb, cached_insn_rd, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, instr_sw, instr_addi, instr_slti, is_jalr_addi_slti_sltiu_xori_ori_andi]
	reg_next_pc =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, set_mem_do_rinst]
	latched_branch =?=> [instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, set_mem_do_rinst]
case: 1_107
	instr_lui =?=> [alu_out_q]
	decoder_pseudo_trigger =?=> [alu_out_q]
	instr_jal =?=> [alu_out_q]
	instr_auipc =?=> [alu_out_q]
	instr_addi =?=> [alu_out_q]
case: 0_106
	instr_lui =?=> [alu_out]
	decoder_pseudo_trigger =?=> [alu_shr, alu_out, is_lui_auipc_jal_jalr_addi_add_sub]
	instr_jal =?=> [alu_out]
	instr_auipc =?=> [alu_out]
	instr_addi =?=> [alu_out, is_lui_auipc_jal_jalr_addi_add_sub]
	is_alu_reg_imm =?=> [alu_shr]
case: 0_110
	instr_lui =?=> [cached_ascii_instr, q_ascii_instr]
	instr_jal =?=> [cached_ascii_instr, q_ascii_instr]
	instr_auipc =?=> [cached_ascii_instr, q_ascii_instr]
	instr_sw =?=> [cached_ascii_instr, q_ascii_instr]
	instr_jalr =?=> [cached_ascii_instr, q_ascii_instr]
	reg_op2 =?=> [alu_shr, alu_shl]
case: 112
	instr_lui =?=> [mem_rdata_q, next_insn_opcode, instr_auipc, instr_jal, is_lb_lh_lw_lbu_lhu, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
	decoder_pseudo_trigger =?=> [mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, is_lb_lh_lw_lbu_lhu, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
	instr_rdcycleh =?=> [mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, is_lb_lh_lw_lbu_lhu, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
	instr_rdcycle =?=> [mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, is_lb_lh_lw_lbu_lhu, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
	mem_rdata_q =?=> [next_insn_opcode]
	is_lui_auipc_jal =?=> [mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, is_lb_lh_lw_lbu_lhu, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
	instr_auipc =?=> [mem_rdata_q, next_insn_opcode, instr_lui, instr_jal, is_lb_lh_lw_lbu_lhu, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
	is_jalr_addi_slti_sltiu_xori_ori_andi =?=> [mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, is_lb_lh_lw_lbu_lhu, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
	instr_addi =?=> [mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, is_lb_lh_lw_lbu_lhu, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
	instr_sw =?=> [mem_wdata, pcpi_insn, cpuregs_rs1, dbg_insn_rd, decoded_rd, mem_state, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	compressed_instr =?=> [alu_shr, alu_shl, alu_add_sub, count_instr, dbg_rs2val, dbg_rs1val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_op1, mem_la_wstrb, mem_la_wdata, latched_rd, trap, mem_do_rdata, mem_do_wdata, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, set_mem_do_rdata, set_mem_do_wdata, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, alu_eq, alu_ltu, alu_lts, cpuregs_write]
	is_sb_sh_sw =?=> [mem_wdata, pcpi_insn, dbg_insn_rd, decoded_rd, mem_state, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	instr_rdinstr =?=> [mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, is_lb_lh_lw_lbu_lhu, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
	is_slli_srli_srai =?=> [mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, is_lb_lh_lw_lbu_lhu, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [decoded_rd, mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, is_alu_reg_imm, is_alu_reg_reg]
	is_lb_lh_lw_lbu_lhu =?=> [mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
	is_alu_reg_imm =?=> [mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, is_lb_lh_lw_lbu_lhu, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
	is_sll_srl_sra =?=> [mem_wdata, pcpi_insn, cpuregs_rs1, dbg_insn_rd, decoded_rd, mem_state, dbg_insn_opcode, dbg_insn_addr, mem_do_prefetch, mem_do_rdata, mem_do_wdata, decoder_trigger_q, decoder_pseudo_trigger_q, is_lb_lh_lw_lbu_lhu, is_sb_sh_sw, dbg_rs1val_valid, dbg_next, dbg_valid_insn, set_mem_do_rdata, set_mem_do_wdata]
	instr_rdinstrh =?=> [mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, is_lb_lh_lw_lbu_lhu, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
case: 105_106
	instr_lui =?=> [dbg_insn_imm]
	instr_jal =?=> [dbg_insn_imm]
	mem_rdata_q =?=> [dbg_insn_imm, dbg_ascii_instr]
	instr_auipc =?=> [dbg_insn_imm]
	is_sb_sh_sw =?=> [dbg_insn_imm]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [dbg_insn_imm]
	is_alu_reg_imm =?=> [dbg_insn_imm]
case: 0_106_109
	instr_lui =?=> [dbg_ascii_instr]
	instr_jal =?=> [dbg_ascii_instr]
	instr_auipc =?=> [dbg_ascii_instr]
	instr_jalr =?=> [dbg_ascii_instr]
case: 0_109
	instr_lui =?=> [new_ascii_instr]
	instr_jal =?=> [new_ascii_instr]
	instr_auipc =?=> [new_ascii_instr]
	instr_sw =?=> [new_ascii_instr]
	instr_jalr =?=> [alu_out, new_ascii_instr, is_jalr_addi_slti_sltiu_xori_ori_andi, is_lui_auipc_jal_jalr_addi_add_sub]
	is_sb_sh_sw =?=> [instr_sw]
	is_lb_lh_lw_lbu_lhu =?=> [new_ascii_instr, instr_lw]
case: 110_113_116_120_123_127_131_134_138_142_145_149_153_156_160_164_167_171_175_178_182_186_189_193_197_200_204_208_211_215_219_222_226_230_233_237_241_244_248_252_255_259_263_266_270_274_277_281_285_288_292_296_299_303_307_310_314_318_321_325_329_332_336_340_343_347_351_354_358_362_365_369_373_376_380_384_387_391_395_398_402_406_409_413_417_420_424_428_431_435_439_442_446_450_453_457_461_464_468_472_475_479_483_486_490_494_497_501_505_508_512_516_519_523_527_530_534_538_541_545_549_552_556_560_563_567_571_574_578_582_585_589_593_596_600_604_607_611_615_618_622_626_629_633_637_640_644_648_651_655_659_662_666_670_673_677_681_684_688_692_695_699_703_706_710_714_717_721_725_728_732_736_739_743_747_750_754_758_761_765_769_772_776_780_783_787_791_794_798_802_805_809_813_816_820_824_827_831_835_838_842_846_849_853_857_860_864_868_871_875_879_882_886_890_893_897_901_904_908_912_915_919_923_926_930_934_937_941_945_948_952_956_959_963_967_970_974_978_981_985_989_992_996_1000_1003_1007_1011_1014_1018_1022_1025_1029_1033_1036_1040_1044_1047_1051_1055_1058_1062_1066_1069_1073_1077_1080_1084_1088_1091_1095_1099
	instr_lui =?=> [last_mem_valid]
	decoder_pseudo_trigger =?=> [last_mem_valid]
	instr_rdcycleh =?=> [last_mem_valid]
	instr_rdcycle =?=> [last_mem_valid]
	mem_rdata_q =?=> [last_mem_valid]
	is_lui_auipc_jal =?=> [last_mem_valid]
	instr_auipc =?=> [last_mem_valid]
	is_jalr_addi_slti_sltiu_xori_ori_andi =?=> [last_mem_valid]
	instr_addi =?=> [last_mem_valid]
	instr_rdinstr =?=> [last_mem_valid]
	is_slli_srli_srai =?=> [last_mem_valid]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [last_mem_valid]
	is_lb_lh_lw_lbu_lhu =?=> [last_mem_valid]
	is_alu_reg_imm =?=> [last_mem_valid]
	instr_rdinstrh =?=> [last_mem_valid]
case: 0_108
	instr_lui =?=> [is_lui_auipc_jal_jalr_addi_add_sub]
	instr_auipc =?=> [is_lui_auipc_jal_jalr_addi_add_sub]
case: 111
	instr_lui =?=> [alu_out_0_q]
	decoder_pseudo_trigger =?=> [alu_out_0_q]
	instr_rdcycleh =?=> [alu_out_0_q]
	instr_rdcycle =?=> [alu_out_0_q]
	mem_rdata_q =?=> [is_lbu_lhu_lw]
	is_lui_auipc_jal =?=> [alu_out_0_q]
	instr_auipc =?=> [alu_out_0_q]
	is_jalr_addi_slti_sltiu_xori_ori_andi =?=> [alu_out_0_q]
	instr_addi =?=> [alu_out_0_q]
	instr_sw =?=> [reg_pc, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_jalr =?=> [mem_wdata, decoder_pseudo_trigger_q, dbg_valid_insn]
	compressed_instr =?=> [dbg_ascii_state, cpu_state, cpuregs_wrdata]
	is_sb_sh_sw =?=> [reg_pc, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
	instr_rdinstr =?=> [alu_out_0_q]
	instr_retirq =?=> [mem_wdata, decoder_pseudo_trigger_q, dbg_valid_insn]
	is_slli_srli_srai =?=> [alu_out_0_q]
	is_lb_lh_lw_lbu_lhu =?=> [alu_out_0_q]
	is_alu_reg_imm =?=> [alu_out_0_q]
	is_sll_srl_sra =?=> [reg_pc, alu_shr, alu_shl, alu_add_sub, count_instr, dbg_rs2val, dbg_rs1val, mem_rdata_word, mem_wordsize, reg_op2, reg_sh, reg_out, reg_op1, reg_next_pc, mem_la_wstrb, mem_la_wdata, latched_rd, trap, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, alu_eq, alu_ltu, alu_lts, cpuregs_write]
	instr_rdinstrh =?=> [alu_out_0_q]
case: 1_107_117
	alu_add_sub =?=> [alu_out_q]
	reg_op1 =?=> [alu_out_q]
	reg_op2 =?=> [alu_out_q]
case: 0_106_116
	alu_add_sub =?=> [alu_out]
	reg_op1 =?=> [alu_out]
	reg_op2 =?=> [alu_out]
case: 110_128_150_172_194_216_238_260_282_304_326_348_370_392_414_436_458_480_502_524_546_568_590_612_634_656_678_700_722_744_766_788_810_832_854_876_898_920_942_964_986_1008_1030_1052_1074_1096
	cpuregs_rs2 =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs2val, reg_op2, reg_sh, mem_la_wdata, alu_eq, alu_ltu, alu_lts]
	instr_sub =?=> [alu_shr, alu_shl, reg_op1, alu_eq, alu_ltu, alu_lts]
	decoded_rs2 =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs2val, reg_op2, reg_sh, mem_la_wdata, alu_eq, alu_ltu, alu_lts]
case: 133_155_177_199_221_243_265_287_309_331_353_375_397_419_441_463_485_507_529_551_573_595_617_639_661_683_705_727_749_771_793_815_837_859_881_903_925_947_969_991_1013_1035_1057_1079
	cpuregs_rs2 =?=> [alu_out_q]
	decoded_rs2 =?=> [alu_out_q]
case: 132_154_176_198_220_242_264_286_308_330_352_374_396_418_440_462_484_506_528_550_572_594_616_638_660_682_704_726_748_770_792_814_836_858_880_902_924_946_968_990_1012_1034_1056_1078
	cpuregs_rs2 =?=> [alu_out]
	decoded_rs2 =?=> [alu_out]
case: 0_106_116_117_123_128_134_135_139_145_146_150_156_157_161_167_168_172_178_179_183_189_190_194_200_201_205_211_212_216_222_223_227_233_234_238_244_245_249_255_256_260_266_267_271_277_278_282_288_289_293_299_300_304_310_311_315_321_322_326_332_333_337_343_344_348_354_355_359_365_366_370_376_377_381_387_388_392_398_399_403_409_410_414_420_421_425_431_432_436_442_443_447_453_454_458_464_465_469_475_476_480_486_487_491_497_498_502_508_509_513_519_520_524_530_531_535_541_542_546_552_553_557_563_564_568_574_575_579_585_586_590_596_597_601_607_608_612_618_619_623_629_630_634_640_641_645_651_652_656_662_663_667_673_674_678_684_685_689_695_696_700_706_707_711_717_718_722_728_729_733_739_740_744_750_751_755_761_762_766_772_773_777_783_784_788_794_795_799_805_806_810_816_817_821_827_828_832_838_839_843_849_850_854_860_861_865_871_872_876_882_883_887_893_894_898_904_905_909_915_916_920_926_927_931_937_938_942_948_949_953_959_960_964_970_971_975_981_982_986_992_993_997_1003_1004_1008_1014_1015_1019_1025_1026_1030_1036_1037_1041_1047_1048_1052_1058_1059_1063_1069_1070_1074_1080_1081_1085_1091_1092_1096
	cached_ascii_instr =?=> [dbg_ascii_instr]
	cached_insn_imm =?=> [dbg_insn_imm]
	cached_insn_opcode =?=> [dbg_insn_opcode]
case: 0_114_132_154_176_198_220_242_264_286_308_330_352_374_396_418_440_462_484_506_528_550_572_594_616_638_660_682_704_726_748_770_792_814_836_858_880_902_924_946_968_990_1012_1034_1056_1078
	instr_sb =?=> [cached_ascii_instr]
	instr_lbu =?=> [cached_ascii_instr]
	instr_lhu =?=> [cached_ascii_instr]
	instr_sh =?=> [cached_ascii_instr]
case: 113_131_153_175_197_219_241_263_285_307_329_351_373_395_417_439_461_483_505_527_549_571_593_615_637_659_681_703_725_747_769_791_813_835_857_879_901_923_945_967_989_1011_1033_1055_1077_1099
	instr_sb =?=> [mem_wstrb]
	mem_la_wstrb =?=> [mem_wstrb]
	mem_wordsize =?=> [mem_wstrb]
	instr_sh =?=> [mem_wstrb]
case: 112_130_152_174_196_218_240_262_284_306_328_350_372_394_416_438_460_482_504_526_548_570_592_614_636_658_680_702_724_746_768_790_812_834_856_878_900_922_944_966_988_1010_1032_1054_1076_1098
	instr_sb =?=> [mem_rdata_word, mem_wordsize, mem_la_wstrb, mem_la_wdata]
	instr_sh =?=> [mem_rdata_word, mem_wordsize, mem_la_wstrb, mem_la_wdata]
case: 0_106_109_116_117_124_127_134_135_146_149_156_157_168_171_178_179_190_193_200_201_212_215_222_223_234_237_244_245_256_259_266_267_278_281_288_289_300_303_310_311_322_325_332_333_344_347_354_355_366_369_376_377_388_391_398_399_410_413_420_421_432_435_442_443_454_457_464_465_476_479_486_487_498_501_508_509_520_523_530_531_542_545_552_553_564_567_574_575_586_589_596_597_608_611_618_619_630_633_640_641_652_655_662_663_674_677_684_685_696_699_706_707_718_721_728_729_740_743_750_751_762_765_772_773_784_787_794_795_806_809_816_817_828_831_838_839_850_853_860_861_872_875_882_883_894_897_904_905_916_919_926_927_938_941_948_949_960_963_970_971_982_985_992_993_1004_1007_1014_1015_1026_1029_1036_1037_1048_1051_1058_1059_1070_1073_1080_1081_1092_1095
	instr_sb =?=> [dbg_ascii_instr]
	instr_lbu =?=> [dbg_ascii_instr]
	instr_lhu =?=> [dbg_ascii_instr]
	instr_sh =?=> [dbg_ascii_instr]
case: 0_117_135_157_179_201_223_245_267_289_311_333_355_377_399_421_443_465_487_509_531_553_575_597_619_641_663_685_707_729_751_773_795_817_839_861_883_905_927_949_971_993_1015_1037_1059_1081
	instr_sb =?=> [q_ascii_instr]
	instr_lbu =?=> [q_ascii_instr]
	instr_lhu =?=> [q_ascii_instr]
	instr_sh =?=> [q_ascii_instr]
case: 124_146_168_190_212_234_256_278_300_322_344_366_388_410_432_454_476_498_520_542_564_586_608_630_652_674_696_718_740_762_784_806_828_850_872_894_916_938_960_982_1004_1026_1048_1070_1092
	mem_rdata_word =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	instr_lb =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	latched_stalu =?=> [alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	is_lbu_lhu_lw =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	latched_is_lb =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	instr_lbu =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	mem_wordsize =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	latched_is_lu =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	latched_is_lh =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	instr_lh =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	instr_lhu =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
	reg_out =?=> [alu_shr, alu_shl, alu_add_sub, dbg_rs1val, reg_op1, alu_eq, alu_ltu, alu_lts]
case: 125_133_147_155_169_177_191_199_213_221_235_243_257_265_279_287_301_309_323_331_345_353_367_375_389_397_411_419_433_441_455_463_477_485_499_507_521_529_543_551_565_573_587_595_609_617_631_639_653_661_675_683_697_705_719_727_741_749_763_771_785_793_807_815_829_837_851_859_873_881_895_903_917_925_939_947_961_969_983_991_1005_1013_1027_1035_1049_1057_1071_1079_1093
	mem_rdata_word =?=> [alu_out_q]
	instr_lb =?=> [alu_out_q]
	latched_stalu =?=> [alu_out_q]
	is_lbu_lhu_lw =?=> [alu_out_q]
	latched_is_lb =?=> [alu_out_q]
	instr_lbu =?=> [alu_out_q]
	mem_wordsize =?=> [alu_out_q]
	latched_is_lu =?=> [alu_out_q]
	latched_is_lh =?=> [alu_out_q]
	instr_lh =?=> [alu_out_q]
	instr_lhu =?=> [alu_out_q]
	reg_out =?=> [alu_out_q]
case: 124_132_146_154_168_176_190_198_212_220_234_242_256_264_278_286_300_308_322_330_344_352_366_374_388_396_410_418_432_440_454_462_476_484_498_506_520_528_542_550_564_572_586_594_608_616_630_638_652_660_674_682_696_704_718_726_740_748_762_770_784_792_806_814_828_836_850_858_872_880_894_902_916_924_938_946_960_968_982_990_1004_1012_1026_1034_1048_1056_1070_1078_1092
	mem_rdata_word =?=> [alu_out]
	instr_lb =?=> [alu_out]
	latched_stalu =?=> [alu_out]
	is_lbu_lhu_lw =?=> [alu_out]
	latched_is_lb =?=> [alu_out]
	instr_lbu =?=> [alu_out]
	mem_wordsize =?=> [alu_out]
	latched_is_lu =?=> [alu_out]
	latched_is_lh =?=> [alu_out]
	instr_lh =?=> [alu_out]
	instr_lhu =?=> [alu_out]
	reg_out =?=> [alu_out]
case: 126_148_170_192_214_236_258_280_302_324_346_368_390_412_434_456_478_500_522_544_566_588_610_632_654_676_698_720_742_764_786_808_830_852_874_896_918_940_962_984_1006_1028_1050_1072_1094
	mem_rdata_word =?=> [cpuregs_rs2]
	instr_lb =?=> [cpuregs_rs2]
	latched_stalu =?=> [cpuregs_rs2]
	is_lbu_lhu_lw =?=> [cpuregs_rs2]
	latched_is_lb =?=> [cpuregs_rs2]
	instr_lbu =?=> [cpuregs_rs2]
	mem_wordsize =?=> [cpuregs_rs2]
	latched_is_lu =?=> [cpuregs_rs2]
	latched_is_lh =?=> [cpuregs_rs2]
	instr_lh =?=> [cpuregs_rs2]
	instr_lhu =?=> [cpuregs_rs2]
	reg_out =?=> [cpuregs_rs2]
case: 123_141_163_185_207_229_251_273_295_317_339_361_383_405_427_449_471_493_515_537_559_581_603_625_647_669_691_713_735_757_779_801_823_845_867_889_911_933_955_977_999_1021_1043_1065_1087
	mem_rdata_word =?=> [cpuregs_rs1]
	instr_lb =?=> [cpuregs_rs1]
	latched_stalu =?=> [cpuregs_rs1]
	is_lbu_lhu_lw =?=> [cpuregs_rs1]
	latched_is_lb =?=> [cpuregs_rs1]
	instr_lbu =?=> [cpuregs_rs1]
	mem_wordsize =?=> [cpuregs_rs1]
	latched_is_lu =?=> [cpuregs_rs1]
	latched_is_lh =?=> [cpuregs_rs1]
	instr_lh =?=> [cpuregs_rs1]
	instr_lhu =?=> [cpuregs_rs1]
	reg_out =?=> [cpuregs_rs1]
case: 128_150_172_194_216_238_260_282_304_326_348_370_392_414_436_458_480_502_524_546_568_590_612_634_656_678_700_722_744_766_788_810_832_854_876_898_920_942_964_986_1008_1030_1052_1074_1096
	mem_rdata_word =?=> [dbg_rs2val, reg_op2, reg_sh, mem_la_wdata]
	instr_lb =?=> [dbg_rs2val, reg_op2, reg_sh]
	latched_stalu =?=> [dbg_rs2val, reg_op2, reg_sh, mem_la_wdata]
	is_lbu_lhu_lw =?=> [dbg_rs2val, reg_op2, reg_sh, mem_la_wdata]
	latched_is_lb =?=> [dbg_rs2val, reg_op2, reg_sh, mem_la_wdata]
	instr_lbu =?=> [dbg_rs2val, reg_op2, reg_sh]
	mem_wordsize =?=> [dbg_rs2val, reg_op2, reg_sh]
	latched_is_lu =?=> [dbg_rs2val, reg_op2, reg_sh, mem_la_wdata]
	instr_sub =?=> [dbg_rs2val, reg_op2, reg_sh, mem_la_wdata]
	latched_is_lh =?=> [dbg_rs2val, reg_op2, reg_sh, mem_la_wdata]
	instr_lh =?=> [dbg_rs2val, reg_op2, reg_sh]
	instr_lhu =?=> [dbg_rs2val, reg_op2, reg_sh]
	reg_out =?=> [dbg_rs2val, reg_op2, reg_sh, mem_la_wdata]
case: 122_125_144_147_166_169_188_191_210_213_232_235_254_257_276_279_298_301_320_323_342_345_364_367_386_389_408_411_430_433_452_455_474_477_496_499_518_521_540_543_562_565_584_587_606_609_628_631_650_653_672_675_694_697_716_719_738_741_760_763_782_785_804_807_826_829_848_851_870_873_892_895_914_917_936_939_958_961_980_983_1002_1005_1024_1027_1046_1049_1068_1071_1090_1093
	mem_rdata_word =?=> [cpuregs_wrdata]
	instr_lb =?=> [cpuregs_wrdata]
	latched_stalu =?=> [cpuregs_wrdata]
	is_lbu_lhu_lw =?=> [cpuregs_wrdata]
	latched_is_lb =?=> [cpuregs_wrdata]
	instr_lbu =?=> [cpuregs_wrdata]
	mem_wordsize =?=> [cpuregs_wrdata]
	latched_is_lu =?=> [cpuregs_wrdata]
	latched_is_lh =?=> [cpuregs_wrdata]
	instr_lh =?=> [cpuregs_wrdata]
	instr_lhu =?=> [cpuregs_wrdata]
	reg_out =?=> [cpuregs_wrdata]
case: 122_144_166_188_210_232_254_276_298_320_342_364_386_408_430_452_474_496_518_540_562_584_606_628_650_672_694_716_738_760_782_804_826_848_870_892_914_936_958_980_1002_1024_1046_1068_1090
	mem_rdata_word =?=> [reg_out]
	instr_lb =?=> [reg_out]
	is_lbu_lhu_lw =?=> [reg_out]
	latched_is_lb =?=> [reg_out]
	instr_lbu =?=> [reg_out]
	mem_wordsize =?=> [reg_out]
	latched_is_lu =?=> [reg_out]
	latched_is_lh =?=> [reg_out]
	instr_lh =?=> [reg_out]
	instr_lhu =?=> [reg_out]
case: 134_156_178_200_222_244_266_288_310_332_354_376_398_420_442_464_486_508_530_552_574_596_618_640_662_684_706_728_750_772_794_816_838_860_882_904_926_948_970_992_1014_1036_1058_1080
	latched_compr =?=> [cpuregs_wrdata]
case: 119_141_163_185_207_229_251_273_295_317_339_361_383_405_427_449_471_493_515_537_559_581_603_625_647_669_691_713_735_757_779_801_823_845_867_889_911_933_955_977_999_1021_1043_1065_1087
	instr_lb =?=> [mem_rdata_word, mem_wordsize, mem_la_wstrb, latched_is_lb]
	is_lbu_lhu_lw =?=> [latched_is_lu]
	instr_lbu =?=> [mem_rdata_word, mem_wordsize, mem_la_wstrb]
	instr_lh =?=> [mem_rdata_word, mem_wordsize, mem_la_wstrb, latched_is_lh]
	instr_lhu =?=> [mem_rdata_word, mem_wordsize, mem_la_wstrb]
case: 119_128_141_150_163_172_185_194_207_216_229_238_251_260_273_282_295_304_317_326_339_348_361_370_383_392_405_414_427_436_449_458_471_480_493_502_515_524_537_546_559_568_581_590_603_612_625_634_647_656_669_678_691_700_713_722_735_744_757_766_779_788_801_810_823_832_845_854_867_876_889_898_911_920_933_942_955_964_977_986_999_1008_1021_1030_1043_1052_1065_1074_1087_1096
	instr_lb =?=> [mem_la_wdata]
	instr_lbu =?=> [mem_la_wdata]
	instr_lh =?=> [mem_la_wdata]
	instr_lhu =?=> [mem_la_wdata]
case: 102_105_109_113_116_120_123_127_131_134_138_142_145_149_153_156_160_164_167_171_175_178_182_186_189_193_197_200_204_208_211_215_219_222_226_230_233_237_241_244_248_252_255_259_263_266_270_274_277_281_285_288_292_296_299_303_307_310_314_318_321_325_329_332_336_340_343_347_351_354_358_362_365_369_373_376_380_384_387_391_395_398_402_406_409_413_417_420_424_428_431_435_439_442_446_450_453_457_461_464_468_472_475_479_483_486_490_494_497_501_505_508_512_516_519_523_527_530_534_538_541_545_549_552_556_560_563_567_571_574_578_582_585_589_593_596_600_604_607_611_615_618_622_626_629_633_637_640_644_648_651_655_659_662_666_670_673_677_681_684_688_692_695_699_703_706_710_714_717_721_725_728_732_736_739_743_747_750_754_758_761_765_769_772_776_780_783_787_791_794_798_802_805_809_813_816_820_824_827_831_835_838_842_846_849_853_857_860_864_868_871_875_879_882_886_890_893_897_901_904_908_912_915_919_923_926_930_934_937_941_945_948_952_956_959_963_967_970_974_978_981_985_989_992_996_1000_1003_1007_1011_1014_1018_1022_1025_1029_1033_1036_1040_1044_1047_1051_1055_1058_1062_1066_1069_1073_1077_1080_1084_1088_1091_1095_1099
	mem_do_rinst =?=> [last_mem_valid]
	mem_do_wdata =?=> [last_mem_valid]
	mem_do_rdata =?=> [last_mem_valid]
	mem_state =?=> [last_mem_valid]
	mem_do_prefetch =?=> [last_mem_valid]
case: 106_109_113_116_120_123_127_131_134_138_142_145_149_153_156_160_164_167_171_175_178_182_186_189_193_197_200_204_208_211_215_219_222_226_230_233_237_241_244_248_252_255_259_263_266_270_274_277_281_285_288_292_296_299_303_307_310_314_318_321_325_329_332_336_340_343_347_351_354_358_362_365_369_373_376_380_384_387_391_395_398_402_406_409_413_417_420_424_428_431_435_439_442_446_450_453_457_461_464_468_472_475_479_483_486_490_494_497_501_505_508_512_516_519_523_527_530_534_538_541_545_549_552_556_560_563_567_571_574_578_582_585_589_593_596_600_604_607_611_615_618_622_626_629_633_637_640_644_648_651_655_659_662_666_670_673_677_681_684_688_692_695_699_703_706_710_714_717_721_725_728_732_736_739_743_747_750_754_758_761_765_769_772_776_780_783_787_791_794_798_802_805_809_813_816_820_824_827_831_835_838_842_846_849_853_857_860_864_868_871_875_879_882_886_890_893_897_901_904_908_912_915_919_923_926_930_934_937_941_945_948_952_956_959_963_967_970_974_978_981_985_989_992_996_1000_1003_1007_1011_1014_1018_1022_1025_1029_1033_1036_1040_1044_1047_1051_1055_1058_1062_1066_1069_1073_1077_1080_1084_1088_1091_1095_1099
	reg_pc =?=> [last_mem_valid]
	latched_store =?=> [last_mem_valid]
	reg_next_pc =?=> [last_mem_valid]
	latched_branch =?=> [last_mem_valid]
case: 1_117_135_146_157_168_179_190_201_212_223_234_245_256_267_278_289_300_311_322_333_344_355_366_377_388_399_410_421_432_443_454_465_476_487_498_509_520_531_542_553_564_575_586_597_608_619_630_641_652_663_674_685_696_707_718_729_740_751_762_773_784_795_806_817_828_839_850_861_872_883_894_905_916_927_938_949_960_971_982_993_1004_1015_1026_1037_1048_1059_1070_1081_1092
	decoder_trigger_q =?=> [q_insn_rd, q_insn_imm, q_ascii_instr, q_insn_rs2, q_insn_opcode, q_insn_rs1]
case: 0_1_106_116_117_123_128_134_135_139_145_146_150_156_157_161_167_168_172_178_179_183_189_190_194_200_201_205_211_212_216_222_223_227_233_234_238_244_245_249_255_256_260_266_267_271_277_278_282_288_289_293_299_300_304_310_311_315_321_322_326_332_333_337_343_344_348_354_355_359_365_366_370_376_377_381_387_388_392_398_399_403_409_410_414_420_421_425_431_432_436_442_443_447_453_454_458_464_465_469_475_476_480_486_487_491_497_498_502_508_509_513_519_520_524_530_531_535_541_542_546_552_553_557_563_564_568_574_575_579_585_586_590_596_597_601_607_608_612_618_619_623_629_630_634_640_641_645_651_652_656_662_663_667_673_674_678_684_685_689_695_696_700_706_707_711_717_718_722_728_729_733_739_740_744_750_751_755_761_762_766_772_773_777_783_784_788_794_795_799_805_806_810_816_817_821_827_828_832_838_839_843_849_850_854_860_861_865_871_872_876_882_883_887_893_894_898_904_905_909_915_916_920_926_927_931_937_938_942_948_949_953_959_960_964_970_971_975_981_982_986_992_993_997_1003_1004_1008_1014_1015_1019_1025_1026_1030_1036_1037_1041_1047_1048_1052_1058_1059_1063_1069_1070_1074_1080_1081_1085_1091_1092_1096
	decoder_trigger_q =?=> [dbg_insn_imm, dbg_ascii_instr, dbg_insn_opcode]
case: 0_1
	decoder_pseudo_trigger =?=> [dbg_insn_imm, dbg_ascii_instr, dbg_insn_opcode]
	mem_valid =?=> [dbg_insn_opcode]
case: 124_146_168_190_212_234_256_278_300_304_322_326_344_366_388_392_403_410_414_432_454_458_476_480_498_502_520_524_542_546_564_568_586_590_608_612_630_634_652_656_674_678_696_700_718_722_740_744_755_762_766_784_788_806_828_850_872_894_916_938_960_982_1004_1008_1026_1030_1048_1070_1092_1096
	latched_stalu =?=> [alu_shr]
case: 124_146_168_190_212_234_256_278_300_304_322_344_366_388_392_410_432_454_476_498_520_542_564_586_608_630_652_656_674_696_718_740_762_784_806_828_850_872_894_916_938_960_982_1004_1008_1026_1048_1070_1092_1096
	latched_stalu =?=> [alu_shl]
case: 0_114
	reg_op1 =?=> [mem_rdata_word, mem_la_wstrb]
	instr_lw =?=> [cached_ascii_instr]
case: 0_116
	reg_op1 =?=> [alu_out_0]
	is_sb_sh_sw =?=> [instr_sb, instr_sh]
	is_lb_lh_lw_lbu_lhu =?=> [instr_lh, instr_lbu, instr_lhu]
	is_alu_reg_imm =?=> [instr_slli, instr_srli, instr_srai, is_slli_srli_srai]
	reg_op2 =?=> [alu_out_0]
case: 1_117
	reg_op1 =?=> [alu_out_0_q]
	reg_op2 =?=> [alu_out_0_q]
case: 107_109_113_116_120_123_127_131_134_138_142_145_149_153_156_160_164_167_171_175_178_182_186_189_193_197_200_204_208_211_215_219_222_226_230_233_237_241_244_248_252_255_259_263_266_270_274_277_281_285_288_292_296_299_303_307_310_314_318_321_325_329_332_336_340_343_347_351_354_358_362_365_369_373_376_380_384_387_391_395_398_402_406_409_413_417_420_424_428_431_435_439_442_446_450_453_457_461_464_468_472_475_479_483_486_490_494_497_501_505_508_512_516_519_523_527_530_534_538_541_545_549_552_556_560_563_567_571_574_578_582_585_589_593_596_600_604_607_611_615_618_622_626_629_633_637_640_644_648_651_655_659_662_666_670_673_677_681_684_688_692_695_699_703_706_710_714_717_721_725_728_732_736_739_743_747_750_754_758_761_765_769_772_776_780_783_787_791_794_798_802_805_809_813_816_820_824_827_831_835_838_842_846_849_853_857_860_864_868_871_875_879_882_886_890_893_897_901_904_908_912_915_919_923_926_930_934_937_941_945_948_952_956_959_963_967_970_974_978_981_985_989_992_996_1000_1003_1007_1011_1014_1018_1022_1025_1029_1033_1036_1040_1044_1047_1051_1055_1058_1062_1066_1069_1073_1077_1080_1084_1088_1091_1095_1099
	instr_jal =?=> [last_mem_valid]
	instr_jalr =?=> [last_mem_valid]
	instr_retirq =?=> [last_mem_valid]
case: 0_107
	instr_jal =?=> [is_lui_auipc_jal_jalr_addi_add_sub]
case: 111_115_129_140_151_162_173_184_195_206_217_228_239_250_261_272_283_294_305_316_327_338_349_360_371_382_393_404_415_426_437_448_459_470_481_492_503_514_525_536_547_558_569_580_591_602_613_624_635_646_657_668_679_690_701_712_723_734_745_756_767_778_789_800_811_822_833_844_855_866_877_888_899_910_921_932_943_954_965_976_987_998_1009_1020_1031_1042_1053_1064_1075_1086_1097
	is_alu_reg_reg =?=> [alu_out_q]
case: 110_114_128_139_150_161_172_183_194_205_216_227_238_249_260_271_282_293_304_315_326_337_348_359_370_381_392_403_414_425_436_447_458_469_480_491_502_513_524_535_546_557_568_579_590_601_612_623_634_645_656_667_678_689_700_711_722_733_744_755_766_777_788_799_810_821_832_843_854_865_876_887_898_909_920_931_942_953_964_975_986_997_1008_1019_1030_1041_1052_1063_1074_1085_1096
	is_alu_reg_reg =?=> [alu_out, is_compare]
case: 110_139_161_183_205_227_249_271_293_315_337_359_381_403_425_447_469_491_513_535_557_579_601_623_645_667_689_711_733_755_777_799_821_843_865_887_909_931_953_975_997_1019_1041_1063_1085
	is_alu_reg_reg =?=> [cached_ascii_instr, q_ascii_instr]
case: 109_110_135_138_139_157_160_161_179_182_183_201_204_205_223_226_227_245_248_249_267_270_271_289_292_293_311_314_315_333_336_337_355_358_359_377_380_381_399_402_403_421_424_425_443_446_447_465_468_469_487_490_491_509_512_513_531_534_535_553_556_557_575_578_579_597_600_601_619_622_623_641_644_645_663_666_667_685_688_689_707_710_711_729_732_733_751_754_755_773_776_777_795_798_799_817_820_821_839_842_843_861_864_865_883_886_887_905_908_909_927_930_931_949_952_953_971_974_975_993_996_997_1015_1018_1019_1037_1040_1041_1059_1062_1063_1081_1084_1085
	is_alu_reg_reg =?=> [dbg_ascii_instr]
case: 109_120_138_142_160_164_182_186_204_208_226_230_248_252_270_274_292_296_314_318_336_340_358_362_380_384_402_406_424_428_446_450_468_472_490_494_512_516_534_538_556_560_578_582_600_604_622_626_644_648_666_670_688_692_710_714_732_736_754_758_776_780_798_802_820_824_842_846_864_868_886_890_908_912_930_934_952_956_974_978_996_1000_1018_1022_1040_1044_1062_1066_1084_1088
	is_alu_reg_reg =?=> [new_ascii_instr]
case: 120_142_164_186_208_230_252_274_296_318_340_362_384_406_428_450_472_494_516_538_560_582_604_626_648_670_692_714_736_758_780_802_824_846_868_890_912_934_956_978_1000_1022_1044_1066_1088
	is_alu_reg_reg =?=> [instr_add]
case: 109_127_138_149_160_171_182_193_204_215_226_237_248_259_270_281_292_303_314_325_336_347_358_369_380_391_402_413_424_435_446_457_468_479_490_501_512_523_534_545_556_567_578_589_600_611_622_633_644_655_666_677_688_699_710_721_732_743_754_765_776_787_798_809_820_831_842_853_864_875_886_897_908_919_930_941_952_963_974_985_996_1007_1018_1029_1040_1051_1062_1073_1084_1095
	is_alu_reg_reg =?=> [instr_slt]
case: 110_128_139_150_161_172_183_194_205_216_227_238_249_260_271_282_293_304_315_326_337_348_359_370_381_392_403_414_425_436_447_458_469_480_491_502_513_524_535_546_557_568_579_590_601_612_623_634_645_656_667_678_689_700_711_722_733_744_755_766_777_788_799_810_821_832_843_854_865_876_887_898_909_920_931_942_953_964_975_986_997_1008_1019_1030_1041_1052_1063_1074_1085_1096
	is_alu_reg_reg =?=> [is_slti_blt_slt, alu_out_0]
case: 111_129_140_151_162_173_184_195_206_217_228_239_250_261_272_283_294_305_316_327_338_349_360_371_382_393_404_415_426_437_448_459_470_481_492_503_514_525_536_547_558_569_580_591_602_613_624_635_646_657_668_679_690_701_712_723_734_745_756_767_778_789_800_811_822_833_844_855_866_877_888_899_910_921_932_943_954_965_976_987_998_1009_1020_1031_1042_1053_1064_1075_1086_1097
	is_alu_reg_reg =?=> [alu_out_0_q]
case: 108_115
	decoded_rd =?=> [cpuregs_rs2]
	latched_rd =?=> [cpuregs_rs2]
	is_beq_bne_blt_bge_bltu_bgeu =?=> [cpuregs_rs2]
case: 0_106_109_110
	instr_sw =?=> [dbg_ascii_instr]
case: 114_116_120_123_127_131_134_138_142_145_149_153_156_160_164_167_171_175_178_182_186_189_193_197_200_204_208_211_215_219_222_226_230_233_237_241_244_248_252_255_259_263_266_270_274_277_281_285_288_292_296_299_303_307_310_314_318_321_325_329_332_336_340_343_347_351_354_358_362_365_369_373_376_380_384_387_391_395_398_402_406_409_413_417_420_424_428_431_435_439_442_446_450_453_457_461_464_468_472_475_479_483_486_490_494_497_501_505_508_512_516_519_523_527_530_534_538_541_545_549_552_556_560_563_567_571_574_578_582_585_589_593_596_600_604_607_611_615_618_622_626_629_633_637_640_644_648_651_655_659_662_666_670_673_677_681_684_688_692_695_699_703_706_710_714_717_721_725_728_732_736_739_743_747_750_754_758_761_765_769_772_776_780_783_787_791_794_798_802_805_809_813_816_820_824_827_831_835_838_842_846_849_853_857_860_864_868_871_875_879_882_886_890_893_897_901_904_908_912_915_919_923_926_930_934_937_941_945_948_952_956_959_963_967_970_974_978_981_985_989_992_996_1000_1003_1007_1011_1014_1018_1022_1025_1029_1033_1036_1040_1044_1047_1051_1055_1058_1062_1066_1069_1073_1077_1080_1084_1088_1091_1095_1099
	instr_sw =?=> [last_mem_valid]
	compressed_instr =?=> [last_mem_valid]
	is_sb_sh_sw =?=> [last_mem_valid]
	is_sll_srl_sra =?=> [last_mem_valid]
case: 0_121_143_165_187_209_231_253_275_297_319_341_363_385_407_429_451_473_495_517_539_561_583_605_627_649_671_693_715_737_759_781_803_825_847_869_891_913_935_957_979_1001_1023_1045_1067_1089
	instr_lbu =?=> [is_lbu_lhu_lw]
	instr_lhu =?=> [is_lbu_lhu_lw]
case: 109_110
	instr_jalr =?=> [alu_add_sub]
	instr_retirq =?=> [alu_add_sub]
case: 1_110
	instr_jalr =?=> [alu_out_q]
	is_sb_sh_sw =?=> [cached_ascii_instr, q_ascii_instr]
	is_lb_lh_lw_lbu_lhu =?=> [cached_ascii_instr, q_ascii_instr, is_lbu_lhu_lw]
case: 107_109
	instr_jalr =?=> [cpuregs_wrdata, latched_branch, cpuregs_write]
case: 107_110
	is_sb_sh_sw =?=> [cpuregs_wrdata, reg_out]
case: 0_1_106_109_109_110
	is_sb_sh_sw =?=> [dbg_ascii_instr]
case: 0_109_109
	is_sb_sh_sw =?=> [new_ascii_instr]
case: 106_114
	decoded_imm =?=> [reg_op2, mem_la_wdata]
case: 107_114
	decoded_imm =?=> [reg_out]
case: 1_111_115_129_140_151_162_173_184_195_206_217_228_239_250_261_272_283_294_305_316_327_338_349_360_371_382_393_404_415_426_437_448_459_470_481_492_503_514_525_536_547_558_569_580_591_602_613_624_635_646_657_668_679_690_701_712_723_734_745_756_767_778_789_800_811_822_833_844_855_866_877_888_899_910_921_932_943_954_965_976_987_998_1009_1020_1031_1042_1053_1064_1075_1086_1097
	instr_add =?=> [alu_out_q]
case: 0_110_114_128_139_150_161_172_183_194_205_216_227_238_249_260_271_282_293_304_315_326_337_348_359_370_381_392_403_414_425_436_447_458_469_480_491_502_513_524_535_546_557_568_579_590_601_612_623_634_645_656_667_678_689_700_711_722_733_744_755_766_777_788_799_810_821_832_843_854_865_876_887_898_909_920_931_942_953_964_975_986_997_1008_1019_1030_1041_1052_1063_1074_1085_1096
	instr_add =?=> [alu_out, is_lui_auipc_jal_jalr_addi_add_sub]
	instr_sub =?=> [is_lui_auipc_jal_jalr_addi_add_sub]
case: 101_105_109_113_116_120_123_127_131_134_138_142_145_149_153_156_160_164_167_171_175_178_182_186_189_193_197_200_204_208_211_215_219_222_226_230_233_237_241_244_248_252_255_259_263_266_270_274_277_281_285_288_292_296_299_303_307_310_314_318_321_325_329_332_336_340_343_347_351_354_358_362_365_369_373_376_380_384_387_391_395_398_402_406_409_413_417_420_424_428_431_435_439_442_446_450_453_457_461_464_468_472_475_479_483_486_490_494_497_501_505_508_512_516_519_523_527_530_534_538_541_545_549_552_556_560_563_567_571_574_578_582_585_589_593_596_600_604_607_611_615_618_622_626_629_633_637_640_644_648_651_655_659_662_666_670_673_677_681_684_688_692_695_699_703_706_710_714_717_721_725_728_732_736_739_743_747_750_754_758_761_765_769_772_776_780_783_787_791_794_798_802_805_809_813_816_820_824_827_831_835_838_842_846_849_853_857_860_864_868_871_875_879_882_886_890_893_897_901_904_908_912_915_919_923_926_930_934_937_941_945_948_952_956_959_963_967_970_974_978_981_985_989_992_996_1000_1003_1007_1011_1014_1018_1022_1025_1029_1033_1036_1040_1044_1047_1051_1055_1058_1062_1066_1069_1073_1077_1080_1084_1088_1091_1095_1099
	mem_valid =?=> [last_mem_valid]
case: 104_106
	mem_valid =?=> [decoder_trigger]
case: 105_107
	mem_valid =?=> [decoder_trigger_q, dbg_next]
case: 113_120_131_142_153_164_175_186_197_208_219_230_241_252_263_274_285_296_307_318_329_340_351_362_373_384_395_406_417_428_439_450_461_472_483_494_505_516_527_538_549_560_571_582_593_604_615_626_637_648_659_670_681_692_703_714_725_736_747_758_769_780_791_802_813_824_835_846_857_868_879_890_901_912_923_934_945_956_967_978_989_1000_1011_1022_1033_1044_1055_1066_1077_1088_1099
	instr_sub =?=> [mem_addr]
case: 0_106_110
	instr_sub =?=> [alu_add_sub]
case: 1_107_111_115_122_129_133_140_144_151_155_162_166_173_177_184_188_195_199_206_210_217_221_228_232_239_243_250_254_261_265_272_276_283_287_294_298_305_309_316_320_327_331_338_342_349_353_360_364_371_375_382_386_393_397_404_408_415_419_426_430_437_441_448_452_459_463_470_474_481_485_492_496_503_507_514_518_525_529_536_540_547_551_558_562_569_573_580_584_591_595_602_606_613_617_624_628_635_639_646_650_657_661_668_672_679_683_690_694_701_705_712_716_723_727_734_738_745_749_756_760_767_771_778_782_789_793_800_804_811_815_822_826_833_837_844_848_855_859_866_870_877_881_888_892_899_903_910_914_921_925_932_936_943_947_954_958_965_969_976_980_987_991_998_1002_1009_1013_1020_1024_1031_1035_1042_1046_1053_1057_1064_1068_1075_1079_1086_1090_1097
	instr_sub =?=> [alu_out_q]
case: 0_106_110_114_121_128_132_139_143_150_154_161_165_172_176_183_187_194_198_205_209_216_220_227_231_238_242_249_253_260_264_271_275_282_286_293_297_304_308_315_319_326_330_337_341_348_352_359_363_370_374_381_385_392_396_403_407_414_418_425_429_436_440_447_451_458_462_469_473_480_484_491_495_502_506_513_517_524_528_535_539_546_550_557_561_568_572_579_583_590_594_601_605_612_616_623_627_634_638_645_649_656_660_667_671_678_682_689_693_700_704_711_715_722_726_733_737_744_748_755_759_766_770_777_781_788_792_799_803_810_814_821_825_832_836_843_847_854_858_865_869_876_880_887_891_898_902_909_913_920_924_931_935_942_946_953_957_964_968_975_979_986_990_997_1001_1008_1012_1019_1023_1030_1034_1041_1045_1052_1056_1063_1067_1074_1078_1085_1089_1096
	instr_sub =?=> [alu_out]
case: 119_141_148_163_170_185_192_207_214_229_236_251_258_273_295_317_324_339_346_361_368_383_390_405_412_427_434_449_471_493_500_515_522_537_544_559_566_581_588_603_610_625_647_669_676_691_698_713_720_735_742_757_764_779_786_801_823_845_852_867_874_889_896_911_918_933_940_955_962_977_999_1021_1028_1043_1050_1065_1072_1087_1094
	instr_sub =?=> [cpuregs_rs2]
case: 108_126_137_148_159_163_170_181_185_192_203_207_214_225_229_236_247_251_258_269_273_280_291_302_313_324_335_339_346_357_361_368_379_383_390_401_405_412_423_427_434_445_449_456_467_478_489_500_511_515_522_533_537_544_555_559_566_577_581_588_599_603_610_621_625_632_643_654_665_676_687_691_698_709_713_720_731_735_742_753_757_764_775_779_786_797_801_808_819_830_841_852_863_867_874_885_889_896_907_911_918_929_933_940_951_955_962_973_977_984_995_1006_1017_1028_1039_1043_1050_1061_1065_1072_1083_1087_1094
	instr_sub =?=> [cpuregs_rs1]
case: 110_117_128_139_150_161_172_183_194_205_216_227_238_249_260_271_282_293_304_315_326_337_348_359_370_381_392_403_414_425_436_447_458_469_480_491_502_513_524_535_546_557_568_579_590_601_612_623_634_645_656_667_678_689_700_711_722_733_744_755_766_777_788_799_810_821_832_843_854_865_876_887_898_909_920_931_942_953_964_975_986_997_1008_1019_1030_1041_1052_1063_1074_1085_1096
	instr_sub =?=> [dbg_rs1val]
case: 107_125_147_169_191_213_235_257_279_301_323_345_367_389_411_433_455_477_499_521_543_565_587_609_631_653_675_697_719_741_763_785_807_829_851_873_895_917_939_961_983_1005_1027_1049_1071_1093
	instr_sub =?=> [cpuregs_wrdata]
case: 118
	instr_lw =?=> [reg_pc, count_instr, mem_rdata_word, mem_wordsize, reg_next_pc, mem_la_wstrb, latched_rd, trap, decoder_trigger, decoder_pseudo_trigger, dbg_rs2val_valid, latched_store, latched_stalu, latched_branch, latched_is_lu, latched_is_lh, latched_is_lb, cpuregs_write]
case: 120
	instr_lw =?=> [mem_wdata, mem_addr, mem_wstrb, cached_insn_rs2, cached_insn_rs1, cached_insn_opcode, decoded_imm, dbg_insn_imm, q_insn_rs2, q_insn_opcode, q_insn_rs1, mem_valid, mem_instr, mem_la_secondword, instr_addi, is_jalr_addi_slti_sltiu_xori_ori_andi]
case: 122
	instr_lw =?=> [alu_out_q, dbg_insn_rd, decoded_rd, mem_rdata_q, next_insn_opcode, instr_lui, instr_auipc, instr_jal, instr_jalr, is_sb_sh_sw, is_beq_bne_blt_bge_bltu_bgeu, is_alu_reg_reg]
case: 121
	instr_lw =?=> [alu_out, cached_insn_imm, q_insn_imm, is_lui_auipc_jal_jalr_addi_add_sub]
case: 123
	instr_lw =?=> [q_insn_rd, cached_insn_rd, instr_beq, instr_sb, instr_add, is_lui_auipc_jal, is_compare, alu_out_0]
case: 0_106_109_116_117
	instr_lw =?=> [dbg_ascii_instr]
case: 0_109_113
	instr_lw =?=> [new_ascii_instr]
case: 0_117
	instr_lw =?=> [q_ascii_instr]
case: 121_123_127_131_134_138_142_145_149_153_156_160_164_167_171_175_178_182_186_189_193_197_200_204_208_211_215_219_222_226_230_233_237_241_244_248_252_255_259_263_266_270_274_277_281_285_288_292_296_299_303_307_310_314_318_321_325_329_332_336_340_343_347_351_354_358_362_365_369_373_376_380_384_387_391_395_398_402_406_409_413_417_420_424_428_431_435_439_442_446_450_453_457_461_464_468_472_475_479_483_486_490_494_497_501_505_508_512_516_519_523_527_530_534_538_541_545_549_552_556_560_563_567_571_574_578_582_585_589_593_596_600_604_607_611_615_618_622_626_629_633_637_640_644_648_651_655_659_662_666_670_673_677_681_684_688_692_695_699_703_706_710_714_717_721_725_728_732_736_739_743_747_750_754_758_761_765_769_772_776_780_783_787_791_794_798_802_805_809_813_816_820_824_827_831_835_838_842_846_849_853_857_860_864_868_871_875_879_882_886_890_893_897_901_904_908_912_915_919_923_926_930_934_937_941_945_948_952_956_959_963_967_970_974_978_981_985_989_992_996_1000_1003_1007_1011_1014_1018_1022_1025_1029_1033_1036_1040_1044_1047_1051_1055_1058_1062_1066_1069_1073_1077_1080_1084_1088_1091_1095_1099
	instr_lw =?=> [last_mem_valid]
case: 127
	instr_lw =?=> [instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu, instr_sh, instr_sw, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_or, instr_and, is_slli_srli_srai, is_sll_srl_sra]
case: 128
	instr_lw =?=> [is_slti_blt_slt, is_sltiu_bltu_sltu]
case: 124
	instr_lw =?=> [set_mem_do_rinst, alu_out_0_q]
case: 102_107
	is_beq_bne_blt_bge_bltu_bgeu =?=> [alu_out_q]
case: 101_106
	is_beq_bne_blt_bge_bltu_bgeu =?=> [alu_out, is_compare]
case: 0_102
	decoder_trigger =?=> [alu_shr, dbg_rs2val_valid]
case: 101_102
	decoder_trigger =?=> [alu_add_sub]
case: 0_1_106_109
	is_lb_lh_lw_lbu_lhu =?=> [dbg_ascii_instr]
case: 0_1_105
	is_alu_reg_imm =?=> [dbg_ascii_instr]
case: 0_105
	is_alu_reg_imm =?=> [new_ascii_instr]
